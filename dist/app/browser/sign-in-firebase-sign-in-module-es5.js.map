{"version":3,"sources":["webpack:///src/app/firebase/auth/sign-in/firebase-sign-in.module.ts","webpack:///src/app/firebase/auth/sign-in/firebase-sign-in.page.html","webpack:///src/app/firebase/auth/sign-in/firebase-sign-in.page.ts"],"names":["redirectLoggedInToProfile","next","user","queryParams","routes","path","component","canActivate","data","authGuardPipe","FirebaseSignInPageModule","forChild","imports","declarations","FirebaseSignInPage","router","route","authService","ngZone","loadingController","location","historyHelper","validation_messages","type","message","loginForm","compose","required","pattern","minLength","authRedirectResult","getRedirectResult","subscribe","result","redirectLoggedUserToProfilePage","error","manageAuthWithProvidersErrors","params","authProvider","presentLoading","dismissLoading","run","previousUrl","navigate","replaceUrl","authProviderCapitalized","toUpperCase","slice","create","then","loader","currentUrl","includes","redirectLoader","present","dismiss","replaceState","getState","errorMessage","submitError","url","split","resetSubmitError","signInWithEmail","value","prepareForAuthWithProvidersRedirection","signInWithFacebook","signInWithGoogle","console","log","signInWithTwitter","doFacebookLogin","doGoogleLogin","doTwitterLogin","selector","templateUrl","styleUrls"],"mappings":"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","file":"sign-in-firebase-sign-in-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { FirebaseSignInPage } from './firebase-sign-in.page';\r\nimport { ComponentsModule } from '../../../components/components.module';\r\nimport { AngularFireAuthGuard } from '@angular/fire/auth-guard';\r\n\r\nimport { map } from 'rxjs/operators';\r\n\r\n// Firebase guard to redirect logged in users to profile\r\nconst redirectLoggedInToProfile = (next) => map(user => {\r\n  // when queryParams['auth-redirect'] don't redirect because we want\r\n  // the component to handle the redirection\r\n  if (user !== null && !next.queryParams['auth-redirect']) {\r\n    return ['firebase/auth/profile'];\r\n  } else {\r\n    return true;\r\n  }\r\n});\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: FirebaseSignInPage,\r\n    canActivate: [AngularFireAuthGuard],\r\n    data: { authGuardPipe: redirectLoggedInToProfile }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes),\r\n    ComponentsModule\r\n  ],\r\n  declarations: [FirebaseSignInPage]\r\n})\r\nexport class FirebaseSignInPageModule {}\r\n","<ion-header class=\"ion-no-border\">\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"app/categories\"></ion-back-button>\r\n    </ion-buttons>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"login-content\">\r\n  <h2 class=\"auth-title\">\r\n    Sign In with Firebase\r\n    <br/>\r\n  </h2>\r\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"signInWithEmail()\">\r\n    <ion-list class=\"inputs-list\" lines=\"full\">\r\n      <ion-item class=\"input-item\">\r\n        <ion-input type=\"email\" placeholder=\"Email\" formControlName=\"email\" clearInput autocapitalize=\"off\" inputmode=\"email\"></ion-input>\r\n      </ion-item>\r\n      <div class=\"error-container\">\r\n        <ng-container *ngFor=\"let validation of validation_messages.email\">\r\n          <div class=\"error-message\" *ngIf=\"loginForm.get('email').hasError(validation.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\">\r\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n            <span>{{ validation.message }}</span>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n\r\n      <ion-item class=\"input-item\">\r\n        <app-show-hide-password>\r\n          <ion-input type=\"password\" placeholder=\"Password\" formControlName=\"password\"></ion-input>\r\n        </app-show-hide-password>\r\n      </ion-item>\r\n      <div class=\"error-container\">\r\n        <ng-container *ngFor=\"let validation of validation_messages.password\">\r\n          <div class=\"error-message\" *ngIf=\"loginForm.get('password').hasError(validation.type) && (loginForm.get('password').dirty || loginForm.get('password').touched)\">\r\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n            <span>{{ validation.message }}</span>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </ion-list>\r\n\r\n    <ion-button class=\"login-btn\" type=\"submit\" expand=\"block\" [disabled]=\"!loginForm.valid\">Log In</ion-button>\r\n    <div class=\"error-container\" *ngIf=\"submitError\">\r\n      <div class=\"error-message\">\r\n        <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n        <span>{{ submitError }}</span>\r\n      </div>\r\n    </div>\r\n    <ion-row class=\"other-auth-options-row\">\r\n      <ion-button class=\"signup-btn\" fill=\"clear\" [routerLink]=\"['/firebase/auth/sign-up']\">\r\n        Sign Up!\r\n      </ion-button>\r\n    </ion-row>\r\n  </form>\r\n\r\n  <div class=\"social-auth-options\">\r\n    <p class=\"options-divider\">Or</p>\r\n    <ion-button class=\"social-auth-btn facebook-auth-btn\" expand=\"block\" color=\"facebook\" (click)=\"doFacebookLogin()\">Log In with Facebook</ion-button>\r\n    <ion-button class=\"social-auth-btn google-auth-btn\" expand=\"block\" color=\"google\" (click)=\"doGoogleLogin()\">Log In with Google</ion-button>\r\n    <ion-button class=\"social-auth-btn twitter-auth-btn\" expand=\"block\" color=\"twitter\" (click)=\"doTwitterLogin()\">Log In with Twitter</ion-button>\r\n  </div>\r\n</ion-content>\r\n","import { Component, NgZone, OnDestroy } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { LoadingController } from '@ionic/angular';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { HistoryHelperService } from '../../../utils/history-helper.service';\r\nimport { FirebaseAuthService } from '../firebase-auth.service';\r\n\r\n@Component({\r\n  selector: 'app-firebase-sign-in',\r\n  templateUrl: './firebase-sign-in.page.html',\r\n  styleUrls: [\r\n    './styles/firebase-sign-in.page.scss'\r\n  ]\r\n})\r\nexport class FirebaseSignInPage implements OnDestroy {\r\n  loginForm: FormGroup;\r\n  submitError: string;\r\n  redirectLoader: HTMLIonLoadingElement;\r\n  authRedirectResult: Subscription;\r\n\r\n  validation_messages = {\r\n    'email': [\r\n      { type: 'required', message: 'Email is required.' },\r\n      { type: 'pattern', message: 'Enter a valid email.' }\r\n    ],\r\n    'password': [\r\n      { type: 'required', message: 'Password is required.' },\r\n      { type: 'minlength', message: 'Password must be at least 6 characters long.' }\r\n    ]\r\n  };\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute,\r\n    public authService: FirebaseAuthService,\r\n    private ngZone: NgZone,\r\n    public loadingController: LoadingController,\r\n    public location: Location,\r\n    public historyHelper: HistoryHelperService\r\n  ) {\r\n    this.loginForm = new FormGroup({\r\n      'email': new FormControl('', Validators.compose([\r\n        Validators.required,\r\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\r\n      ])),\r\n      'password': new FormControl('', Validators.compose([\r\n        Validators.minLength(6),\r\n        Validators.required\r\n      ]))\r\n    });\r\n\r\n    // Get firebase authentication redirect result invoken when using signInWithRedirect()\r\n    // signInWithRedirect() is only used when client is in web but not desktop\r\n    this.authRedirectResult = this.authService.getRedirectResult()\r\n    .subscribe(result => {\r\n      if (result.user) {\r\n        this.redirectLoggedUserToProfilePage();\r\n      } else if (result.error) {\r\n        this.manageAuthWithProvidersErrors(result.error);\r\n      }\r\n    });\r\n\r\n    // Check if url contains our custom 'auth-redirect' param, then show a loader while we receive the getRedirectResult notification\r\n    this.route.queryParams.subscribe(params => {\r\n      const authProvider = params['auth-redirect'];\r\n      if (authProvider) {\r\n        this.presentLoading(authProvider);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.dismissLoading();\r\n  }\r\n\r\n  // Once the auth provider finished the authentication flow, and the auth redirect completes,\r\n  // hide the loader and redirect the user to the profile page\r\n  redirectLoggedUserToProfilePage() {\r\n    this.dismissLoading();\r\n    // As we are calling the Angular router navigation inside a subscribe method, the navigation will be triggered outside Angular zone.\r\n    // That's why we need to wrap the router navigation call inside an ngZone wrapper\r\n    this.ngZone.run(() => {\r\n      // Get previous URL from our custom History Helper\r\n      // If there's no previous page, then redirect to profile\r\n      // const previousUrl = this.historyHelper.previousUrl || 'firebase/auth/profile';\r\n      const previousUrl = 'firebase/auth/profile';\r\n\r\n      // No need to store in the navigation history the sign-in page with redirect params (it's justa a mandatory mid-step)\r\n      // Navigate to profile and replace current url with profile\r\n      this.router.navigate([previousUrl], { replaceUrl: true });\r\n    });\r\n  }\r\n\r\n  async presentLoading(authProvider?: string) {\r\n    const authProviderCapitalized = authProvider[0].toUpperCase() + authProvider.slice(1);\r\n\r\n    this.loadingController.create({\r\n      message: authProvider ? 'Signing in with ' + authProviderCapitalized : 'Signin in ...'\r\n    }).then((loader) => {\r\n      const currentUrl = this.location.path();\r\n      if (currentUrl.includes('auth-redirect')) {\r\n        this.redirectLoader = loader;\r\n        this.redirectLoader.present();\r\n      }\r\n    });\r\n  }\r\n\r\n  async dismissLoading() {\r\n    if (this.redirectLoader) {\r\n      await this.redirectLoader.dismiss();\r\n    }\r\n  }\r\n\r\n  // Before invoking auth provider redirect flow, present a loading indicator and add a flag to the path.\r\n  // The precense of the flag in the path indicates we should wait for the auth redirect to complete.\r\n  prepareForAuthWithProvidersRedirection(authProvider: string) {\r\n    this.presentLoading(authProvider);\r\n\r\n    this.location.replaceState(this.location.path(), 'auth-redirect=' + authProvider, this.location.getState());\r\n  }\r\n\r\n  manageAuthWithProvidersErrors(errorMessage: string) {\r\n    this.submitError = errorMessage;\r\n    // remove auth-redirect param from url\r\n    this.location.replaceState(this.router.url.split('?')[0], '');\r\n    this.dismissLoading();\r\n  }\r\n\r\n  resetSubmitError() {\r\n    this.submitError = null;\r\n  }\r\n\r\n  signInWithEmail() {\r\n    this.resetSubmitError();\r\n    this.authService.signInWithEmail(this.loginForm.value['email'], this.loginForm.value['password'])\r\n    .then(user => {\r\n      // navigate to user profile\r\n      this.redirectLoggedUserToProfilePage();\r\n    })\r\n    .catch(error => {\r\n      this.submitError = error.message;\r\n      this.dismissLoading();\r\n    });\r\n  }\r\n\r\n  doFacebookLogin(): void {\r\n    this.resetSubmitError();\r\n    this.prepareForAuthWithProvidersRedirection('facebook');\r\n\r\n    this.authService.signInWithFacebook()\r\n    .subscribe((result) => {\r\n      // This gives you a Facebook Access Token. You can use it to access the Facebook API.\r\n      // const token = result.credential.accessToken;\r\n      this.redirectLoggedUserToProfilePage();\r\n    }, (error) => {\r\n      this.manageAuthWithProvidersErrors(error.message);\r\n    });\r\n  }\r\n\r\n  doGoogleLogin(): void {\r\n    this.resetSubmitError();\r\n    this.prepareForAuthWithProvidersRedirection('google');\r\n\r\n    this.authService.signInWithGoogle()\r\n    .subscribe((result) => {\r\n      // This gives you a Google Access Token. You can use it to access the Google API.\r\n      // var token = result.credential.accessToken;\r\n      this.redirectLoggedUserToProfilePage();\r\n    }, (error) => {\r\n        console.log(error);\r\n      this.manageAuthWithProvidersErrors(error.message);\r\n    });\r\n  }\r\n\r\n  doTwitterLogin(): void {\r\n    this.resetSubmitError();\r\n    this.prepareForAuthWithProvidersRedirection('twitter');\r\n\r\n    this.authService.signInWithTwitter()\r\n    .subscribe((result) => {\r\n\r\n      // This gives you a Twitter Access Token. You can use it to access the Twitter API.\r\n      // var token = result.credential.accessToken;\r\n      this.redirectLoggedUserToProfilePage();\r\n    }, (error) => {\r\n      console.log(error);\r\n      this.manageAuthWithProvidersErrors(error.message);\r\n    });\r\n  }\r\n}\r\n"]}