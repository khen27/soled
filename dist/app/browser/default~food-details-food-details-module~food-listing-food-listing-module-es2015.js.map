{"version":3,"sources":["./src/app/food/details/food-details.model.ts","./src/app/food/food.service.ts","./src/app/food/listing/food-listing.model.ts"],"names":[],"mappings":"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","file":"default~food-details-food-details-module~food-listing-food-listing-module-es2015.js","sourcesContent":["import { ShellModel } from '../../shell/data-store';\r\n\r\nexport class FoodDetailsModel extends ShellModel {\r\n  icon: string;\r\n  slug: string;\r\n  showcaseImage: string;\r\n  name: string;\r\n  shortName: string;\r\n  style: string;\r\n  priceRange: number;\r\n  avgRating: number;\r\n  ratings: Array<{concept: string, rate: number}> = [\r\n    {\r\n      concept: '',\r\n      rate: null\r\n    },\r\n    {\r\n      concept: '',\r\n      rate: null\r\n    },\r\n    {\r\n      concept: '',\r\n      rate: null\r\n    }\r\n  ];\r\n  reviewsCount: number;\r\n  openHours: Array<{day: string, open: boolean, hourFrom: string, hourTo: string}> = [\r\n    {\r\n      day: '',\r\n      open: true,\r\n      hourFrom: '',\r\n      hourTo: ''\r\n    },\r\n    {\r\n      day: '',\r\n      open: true,\r\n      hourFrom: '',\r\n      hourTo: ''\r\n    },\r\n    {\r\n      day: '',\r\n      open: false,\r\n      hourFrom: '',\r\n      hourTo: ''\r\n    }\r\n  ];\r\n  location: {\r\n    address: string,\r\n    city: string,\r\n    latlng: string,\r\n    mapImage: string\r\n  };\r\n  tags: Array<string> = [\r\n    '',\r\n    '',\r\n    ''\r\n  ];\r\n  usersPictures: Array<string> = [\r\n    '',\r\n    '',\r\n    '',\r\n    '',\r\n    '',\r\n    ''\r\n  ];\r\n  popularDishes: Array<{name: string, rate: number, votesCount: number}> = [\r\n    {\r\n      name: '',\r\n      rate: null,\r\n      votesCount: null\r\n    },\r\n    {\r\n      name: '',\r\n      rate: null,\r\n      votesCount: null\r\n    }\r\n  ];\r\n  reviews: Array<{\r\n    user: {image: string, name: string, reviewsCount: number, points: number},\r\n    avgRating: number,\r\n    ratings: Array<{concept: string, rate: number}>,\r\n    publishedAt: string,\r\n    message: string\r\n  }> = [\r\n    {\r\n      user: {\r\n        image: '',\r\n        name: '',\r\n        reviewsCount: null,\r\n        points: null\r\n      },\r\n      avgRating: null,\r\n      ratings: [\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        },\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        },\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        }\r\n      ],\r\n      publishedAt: null,\r\n      message: ''\r\n    },\r\n    {\r\n      user: {\r\n        image: '',\r\n        name: '',\r\n        reviewsCount: null,\r\n        points: null\r\n      },\r\n      avgRating: null,\r\n      ratings: [\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        },\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        },\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        }\r\n      ],\r\n      publishedAt: null,\r\n      message: ''\r\n    },\r\n    {\r\n      user: {\r\n        image: '',\r\n        name: '',\r\n        reviewsCount: null,\r\n        points: null\r\n      },\r\n      avgRating: null,\r\n      ratings: [\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        },\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        },\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        }\r\n      ],\r\n      publishedAt: null,\r\n      message: ''\r\n    }\r\n  ];\r\n  popularRecipes: Array<{\r\n    showcaseImage: string,\r\n    name: string,\r\n    chef: {name: string, image: string},\r\n    difficulty: string,\r\n    time: string,\r\n    calories: string,\r\n    chefExtract: string\r\n  }> = [\r\n    {\r\n      showcaseImage: '',\r\n      name: '',\r\n      chef: {\r\n        name: '',\r\n        image: ''\r\n      },\r\n      difficulty: '',\r\n      time: '',\r\n      calories: '',\r\n      chefExtract: ''\r\n    }\r\n  ];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\n\r\nimport { DataStore } from '../shell/data-store';\r\nimport { FoodListingModel } from './listing/food-listing.model';\r\nimport { FoodDetailsModel } from './details/food-details.model';\r\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class FoodService {\r\n  private listingDataStore: DataStore<FoodListingModel>;\r\n  private detailsDataStore: DataStore<FoodDetailsModel>;\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: object,\r\n    private transferStateHelper: TransferStateHelper,\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  public getListingDataSource(): Observable<FoodListingModel> {\r\n    const rawDataSource = this.http.get<FoodListingModel>('./assets/sample-data/food/listing.json')\r\n    .pipe(\r\n      map(\r\n        (data: FoodListingModel) => {\r\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\r\n          // We need to properly cast types from json data\r\n          const listing = new FoodListingModel();\r\n\r\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\r\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\r\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\r\n          Object.assign(listing, data);\r\n\r\n          return listing;\r\n        }\r\n      )\r\n    );\r\n\r\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\r\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\r\n    // duplicate http requests.\r\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('food-listing-state', rawDataSource);\r\n\r\n    return cachedDataSource;\r\n  }\r\n\r\n  public getListingStore(dataSource: Observable<FoodListingModel>): DataStore<FoodListingModel> {\r\n    // Use cache if available\r\n    if (!this.listingDataStore) {\r\n      // Initialize the model specifying that it is a shell model\r\n      const shellModel: FoodListingModel = new FoodListingModel();\r\n      this.listingDataStore = new DataStore(shellModel);\r\n\r\n      // If running in the server, then don't add shell to the Data Store\r\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\r\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\r\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\r\n        this.listingDataStore.load(dataSource, 0);\r\n      } else { // On browser transitions\r\n        // Trigger the loading mechanism (with shell)\r\n        this.listingDataStore.load(dataSource);\r\n      }\r\n    }\r\n    return this.listingDataStore;\r\n  }\r\n\r\n  public getDetailsDataSource(slug: string): Observable<FoodDetailsModel> {\r\n    const rawDataSource = this.http.get<{items: Array<FoodDetailsModel>}>('./assets/sample-data/food/details.json')\r\n    .pipe(\r\n      mergeMap(details => details.items.filter(item => item.slug === slug)),\r\n      map(\r\n        (data: FoodDetailsModel) => {\r\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\r\n          // We need to properly cast types from json data\r\n          const details = new FoodDetailsModel();\r\n\r\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\r\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\r\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\r\n          Object.assign(details, data);\r\n\r\n          return details;\r\n        }\r\n      )\r\n    );\r\n\r\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\r\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\r\n    // duplicate http requests.\r\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('food-details-state', rawDataSource);\r\n\r\n    return cachedDataSource;\r\n  }\r\n\r\n  public getDetailsStore(dataSource: Observable<FoodDetailsModel>): DataStore<FoodDetailsModel> {\r\n    // Initialize the model specifying that it is a shell model\r\n    const shellModel: FoodDetailsModel = new FoodDetailsModel();\r\n    this.detailsDataStore = new DataStore(shellModel);\r\n\r\n    // If running in the server, then don't add shell to the Data Store\r\n    // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\r\n    if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\r\n      // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\r\n      this.detailsDataStore.load(dataSource, 0);\r\n    } else { // On browser transitions\r\n      // Trigger the loading mechanism (with shell)\r\n      this.detailsDataStore.load(dataSource);\r\n    }\r\n\r\n    return this.detailsDataStore;\r\n  }\r\n}\r\n","import { ShellModel } from '../../shell/data-store';\r\n\r\nexport class FoodItemModel {\r\n  icon: string;\r\n  image: string;\r\n  name: string;\r\n  address: string;\r\n  priceRange: number;\r\n  rating: number;\r\n  tags: Array<string> = [\r\n    '',\r\n    '',\r\n    ''\r\n  ];\r\n  pictures: Array<string> = [\r\n    '',\r\n    '',\r\n    '',\r\n    '',\r\n    ''\r\n  ];\r\n}\r\n\r\nexport class FoodListingModel extends ShellModel {\r\n  items: Array<FoodItemModel> = [\r\n    new FoodItemModel(),\r\n    new FoodItemModel(),\r\n    new FoodItemModel(),\r\n    new FoodItemModel()\r\n  ];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}