{"version":3,"sources":["webpack:///src/app/user/profile/user-profile.model.ts","webpack:///src/app/user/friends/user-friends.model.ts","webpack:///src/app/user/user.service.ts","webpack:///src/app/utils/resolver-helper.ts","webpack:///src/app/shell/data-store.ts"],"names":["UserProfileModel","friends","image","name","photos","UserFriendsModel","job","followers","followings","following","UserService","platformId","transferStateHelper","http","rawDataSource","get","pipe","data","profile","Object","assign","cachedDataSource","checkDataSourceState","dataSource","profileDataStore","shellModel","load","friendsDataStore","ResolverHelper","source","constructor","state","ShellModel","isShell","DataStore","networkDelay","appShellConfig","timeline","dataSourceObservable","delay","processedDataSource","AppendShell","subscribe","dataValue","next","asObservable","dataObservable","delayObservable","delayValue"],"mappings":"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","file":"default~user-friends-user-friends-module~user-profile-user-profile-module-es5.js","sourcesContent":["import { ShellModel } from '../../shell/data-store';\r\n\r\nexport class UserProfileModel extends ShellModel {\r\n  userImage: string;\r\n  name: string;\r\n  membership: string;\r\n  job: string;\r\n  likes: string;\r\n  followers: string;\r\n  following: string;\r\n  about: string;\r\n  friends: Array<{image: string, name: string}> = [\r\n    {\r\n      image: '',\r\n      name: ''\r\n    },\r\n    {\r\n      image: '',\r\n      name: ''\r\n    },\r\n    {\r\n      image: '',\r\n      name: ''\r\n    },\r\n    {\r\n      image: '',\r\n      name: ''\r\n    }\r\n  ];\r\n  photos: Array<string> = [\r\n    '',\r\n    '',\r\n    '',\r\n    ''\r\n  ];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n","import { ShellModel } from '../../shell/data-store';\r\n\r\nexport class UserFriendsModel extends ShellModel {\r\n  friends: Array<{\r\n    image: string,\r\n    name: string,\r\n    job: string,\r\n    followers: string,\r\n    followings: string,\r\n    following: boolean}> = [\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: true\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    }\r\n  ];\r\n  followers: Array<{\r\n    image: string,\r\n    name: string,\r\n    job: string,\r\n    followers: string,\r\n    followings: string,\r\n    following: boolean}> = [\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: true\r\n    }\r\n  ];\r\n  following: Array<{\r\n    image: string,\r\n    name: string,\r\n    job: string,\r\n    followers: string,\r\n    followings: string,\r\n    following: boolean}> = [\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    }\r\n  ];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { DataStore } from '../shell/data-store';\r\nimport { UserProfileModel } from './profile/user-profile.model';\r\nimport { UserFriendsModel } from './friends/user-friends.model';\r\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  private profileDataStore: DataStore<UserProfileModel>;\r\n  private friendsDataStore: DataStore<UserFriendsModel>;\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: object,\r\n    private transferStateHelper: TransferStateHelper,\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  public getProfileDataSource(): Observable<UserProfileModel> {\r\n    const rawDataSource = this.http.get<UserProfileModel>('./assets/sample-data/user/user-profile.json')\r\n    .pipe(\r\n      map(\r\n        (data: UserProfileModel) => {\r\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\r\n          // We need to properly cast types from json data\r\n          const profile = new UserProfileModel();\r\n\r\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\r\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. profile = {...data};\r\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\r\n          Object.assign(profile, data);\r\n\r\n          return profile;\r\n        }\r\n      )\r\n    );\r\n\r\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\r\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\r\n    // duplicate http requests.\r\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('profile-state', rawDataSource);\r\n\r\n    return cachedDataSource;\r\n  }\r\n\r\n  public getProfileStore(dataSource: Observable<UserProfileModel>): DataStore<UserProfileModel> {\r\n    // Use cache if available\r\n    if (!this.profileDataStore) {\r\n      // Initialize the model specifying that it is a shell model\r\n      const shellModel: UserProfileModel = new UserProfileModel();\r\n      this.profileDataStore = new DataStore(shellModel);\r\n\r\n      // If running in the server, then don't add shell to the Data Store\r\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\r\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\r\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\r\n        this.profileDataStore.load(dataSource, 0);\r\n      } else { // On browser transitions\r\n        // Trigger the loading mechanism (with shell)\r\n        this.profileDataStore.load(dataSource);\r\n      }\r\n    }\r\n\r\n    return this.profileDataStore;\r\n  }\r\n\r\n  public getFriendsDataSource(): Observable<UserFriendsModel> {\r\n    const rawDataSource = this.http.get<UserFriendsModel>('./assets/sample-data/user/user-friends.json')\r\n    .pipe(\r\n      map(\r\n        (data: UserFriendsModel) => {\r\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\r\n          // We need to properly cast types from json data\r\n          const friends = new UserFriendsModel();\r\n\r\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\r\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. friends = {...data};\r\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\r\n          Object.assign(friends, data);\r\n\r\n          return friends;\r\n        }\r\n      )\r\n    );\r\n\r\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\r\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\r\n    // duplicate http requests.\r\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('friends-state', rawDataSource);\r\n\r\n    return cachedDataSource;\r\n  }\r\n\r\n  public getFriendsStore(dataSource: Observable<UserFriendsModel>): DataStore<UserFriendsModel> {\r\n    // Use cache if available\r\n    if (!this.friendsDataStore) {\r\n      // Initialize the model specifying that it is a shell model\r\n      const shellModel: UserFriendsModel = new UserFriendsModel();\r\n      this.friendsDataStore = new DataStore(shellModel);\r\n\r\n      // If running in the server, then don't add shell to the Data Store\r\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\r\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\r\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\r\n        this.friendsDataStore.load(dataSource, 0);\r\n      } else { // On browser transitions\r\n        // Trigger the loading mechanism (with shell)\r\n        this.friendsDataStore.load(dataSource);\r\n      }\r\n    }\r\n\r\n    return this.friendsDataStore;\r\n  }\r\n}\r\n","import { DataStore } from '../shell/data-store';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nexport interface IResolvedRouteData<T> {\r\n  data: T | DataStore<T>;\r\n}\r\n\r\nexport class ResolverHelper<T> {\r\n  // More info on function overloads here: https://www.typescriptlang.org/docs/handbook/functions.html#overloads\r\n  public static extractData<T>(source: (T | DataStore<T>), constructor: (new(...args: any[]) => T)): Observable<T> {\r\n    if (source instanceof DataStore) {\r\n      return source.state;\r\n    } else if (source instanceof constructor) {\r\n      // The right side of instanceof should be an expression evaluating to a constructor function (ie. a class), not a type\r\n      // That's why we included an extra parameter which acts as a constructor function for type T\r\n      // (see: https://github.com/microsoft/TypeScript/issues/5236)\r\n      return of(source);\r\n    }\r\n  }\r\n}\r\n","import { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\r\nimport { delay, map, startWith } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport class ShellModel {\r\n  isShell = false;\r\n}\r\n\r\nexport class DataStore<T> {\r\n  // We wait on purpose 2 secs on local environment when fetching from json to simulate the backend roundtrip.\r\n  // However, in production you should set this delay to 0 in the environment.prod file.\r\n  // tslint:disable-next-line:max-line-length\r\n  private networkDelay = (environment.appShellConfig && environment.appShellConfig.networkDelay) ? environment.appShellConfig.networkDelay : 0;\r\n\r\n  private timeline: ReplaySubject<T & ShellModel> = new ReplaySubject(1);\r\n\r\n  constructor(private shellModel: T) { }\r\n\r\n  // Static function with generics\r\n  // (ref: https://stackoverflow.com/a/24293088/1116959)\r\n  // Append a shell (T & ShellModel) to every value (T) emmited to the timeline\r\n  public static AppendShell<T>(dataObservable: Observable<T>, shellModel: T, networkDelay = 400): Observable<T & ShellModel> {\r\n    const delayObservable = of(true).pipe(\r\n      delay(networkDelay)\r\n    );\r\n\r\n    // Assign shell flag accordingly\r\n    // (ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\r\n    return combineLatest([\r\n      delayObservable,\r\n      dataObservable\r\n    ]).pipe(\r\n      // Dismiss unnecessary delayValue\r\n      map(([delayValue, dataValue]: [boolean, T]): (T & ShellModel) => Object.assign(dataValue, {isShell: false})),\r\n      // Set the shell model as the initial value\r\n      startWith(Object.assign(shellModel, {isShell: true}))\r\n    );\r\n  }\r\n\r\n  load(dataSourceObservable: Observable<T>, networkDelay?: number): void {\r\n    // tslint:disable-next-line:no-shadowed-variable\r\n    const delay = (typeof networkDelay === 'number') ? networkDelay : this.networkDelay;\r\n\r\n    let processedDataSource: Observable<any>;\r\n\r\n    // If no network delay, then don't show shell\r\n    if (delay === 0) {\r\n      processedDataSource = dataSourceObservable;\r\n    } else {\r\n      processedDataSource = DataStore.AppendShell(dataSourceObservable, this.shellModel, delay);\r\n    }\r\n\r\n    processedDataSource\r\n    .subscribe((dataValue: T & ShellModel) => {\r\n      this.timeline.next(dataValue);\r\n    });\r\n  }\r\n\r\n  public get state(): Observable<T & ShellModel> {\r\n    return this.timeline.asObservable();\r\n  }\r\n}\r\n"]}