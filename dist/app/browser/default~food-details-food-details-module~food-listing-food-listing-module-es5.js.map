{"version":3,"sources":["webpack:///src/app/food/details/food-details.model.ts","webpack:///src/app/food/food.service.ts","webpack:///src/app/food/listing/food-listing.model.ts"],"names":["FoodDetailsModel","ratings","concept","rate","openHours","day","open","hourFrom","hourTo","tags","usersPictures","popularDishes","name","votesCount","reviews","user","image","reviewsCount","points","avgRating","publishedAt","message","popularRecipes","showcaseImage","chef","difficulty","time","calories","chefExtract","FoodService","platformId","transferStateHelper","http","rawDataSource","get","pipe","data","listing","Object","assign","cachedDataSource","checkDataSourceState","dataSource","listingDataStore","shellModel","load","slug","details","items","filter","item","detailsDataStore","FoodItemModel","pictures","FoodListingModel"],"mappings":"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","file":"default~food-details-food-details-module~food-listing-food-listing-module-es5.js","sourcesContent":["import { ShellModel } from '../../shell/data-store';\r\n\r\nexport class FoodDetailsModel extends ShellModel {\r\n  icon: string;\r\n  slug: string;\r\n  showcaseImage: string;\r\n  name: string;\r\n  shortName: string;\r\n  style: string;\r\n  priceRange: number;\r\n  avgRating: number;\r\n  ratings: Array<{concept: string, rate: number}> = [\r\n    {\r\n      concept: '',\r\n      rate: null\r\n    },\r\n    {\r\n      concept: '',\r\n      rate: null\r\n    },\r\n    {\r\n      concept: '',\r\n      rate: null\r\n    }\r\n  ];\r\n  reviewsCount: number;\r\n  openHours: Array<{day: string, open: boolean, hourFrom: string, hourTo: string}> = [\r\n    {\r\n      day: '',\r\n      open: true,\r\n      hourFrom: '',\r\n      hourTo: ''\r\n    },\r\n    {\r\n      day: '',\r\n      open: true,\r\n      hourFrom: '',\r\n      hourTo: ''\r\n    },\r\n    {\r\n      day: '',\r\n      open: false,\r\n      hourFrom: '',\r\n      hourTo: ''\r\n    }\r\n  ];\r\n  location: {\r\n    address: string,\r\n    city: string,\r\n    latlng: string,\r\n    mapImage: string\r\n  };\r\n  tags: Array<string> = [\r\n    '',\r\n    '',\r\n    ''\r\n  ];\r\n  usersPictures: Array<string> = [\r\n    '',\r\n    '',\r\n    '',\r\n    '',\r\n    '',\r\n    ''\r\n  ];\r\n  popularDishes: Array<{name: string, rate: number, votesCount: number}> = [\r\n    {\r\n      name: '',\r\n      rate: null,\r\n      votesCount: null\r\n    },\r\n    {\r\n      name: '',\r\n      rate: null,\r\n      votesCount: null\r\n    }\r\n  ];\r\n  reviews: Array<{\r\n    user: {image: string, name: string, reviewsCount: number, points: number},\r\n    avgRating: number,\r\n    ratings: Array<{concept: string, rate: number}>,\r\n    publishedAt: string,\r\n    message: string\r\n  }> = [\r\n    {\r\n      user: {\r\n        image: '',\r\n        name: '',\r\n        reviewsCount: null,\r\n        points: null\r\n      },\r\n      avgRating: null,\r\n      ratings: [\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        },\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        },\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        }\r\n      ],\r\n      publishedAt: null,\r\n      message: ''\r\n    },\r\n    {\r\n      user: {\r\n        image: '',\r\n        name: '',\r\n        reviewsCount: null,\r\n        points: null\r\n      },\r\n      avgRating: null,\r\n      ratings: [\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        },\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        },\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        }\r\n      ],\r\n      publishedAt: null,\r\n      message: ''\r\n    },\r\n    {\r\n      user: {\r\n        image: '',\r\n        name: '',\r\n        reviewsCount: null,\r\n        points: null\r\n      },\r\n      avgRating: null,\r\n      ratings: [\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        },\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        },\r\n        {\r\n          concept: '',\r\n          rate: null\r\n        }\r\n      ],\r\n      publishedAt: null,\r\n      message: ''\r\n    }\r\n  ];\r\n  popularRecipes: Array<{\r\n    showcaseImage: string,\r\n    name: string,\r\n    chef: {name: string, image: string},\r\n    difficulty: string,\r\n    time: string,\r\n    calories: string,\r\n    chefExtract: string\r\n  }> = [\r\n    {\r\n      showcaseImage: '',\r\n      name: '',\r\n      chef: {\r\n        name: '',\r\n        image: ''\r\n      },\r\n      difficulty: '',\r\n      time: '',\r\n      calories: '',\r\n      chefExtract: ''\r\n    }\r\n  ];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\n\r\nimport { DataStore } from '../shell/data-store';\r\nimport { FoodListingModel } from './listing/food-listing.model';\r\nimport { FoodDetailsModel } from './details/food-details.model';\r\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class FoodService {\r\n  private listingDataStore: DataStore<FoodListingModel>;\r\n  private detailsDataStore: DataStore<FoodDetailsModel>;\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: object,\r\n    private transferStateHelper: TransferStateHelper,\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  public getListingDataSource(): Observable<FoodListingModel> {\r\n    const rawDataSource = this.http.get<FoodListingModel>('./assets/sample-data/food/listing.json')\r\n    .pipe(\r\n      map(\r\n        (data: FoodListingModel) => {\r\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\r\n          // We need to properly cast types from json data\r\n          const listing = new FoodListingModel();\r\n\r\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\r\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\r\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\r\n          Object.assign(listing, data);\r\n\r\n          return listing;\r\n        }\r\n      )\r\n    );\r\n\r\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\r\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\r\n    // duplicate http requests.\r\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('food-listing-state', rawDataSource);\r\n\r\n    return cachedDataSource;\r\n  }\r\n\r\n  public getListingStore(dataSource: Observable<FoodListingModel>): DataStore<FoodListingModel> {\r\n    // Use cache if available\r\n    if (!this.listingDataStore) {\r\n      // Initialize the model specifying that it is a shell model\r\n      const shellModel: FoodListingModel = new FoodListingModel();\r\n      this.listingDataStore = new DataStore(shellModel);\r\n\r\n      // If running in the server, then don't add shell to the Data Store\r\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\r\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\r\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\r\n        this.listingDataStore.load(dataSource, 0);\r\n      } else { // On browser transitions\r\n        // Trigger the loading mechanism (with shell)\r\n        this.listingDataStore.load(dataSource);\r\n      }\r\n    }\r\n    return this.listingDataStore;\r\n  }\r\n\r\n  public getDetailsDataSource(slug: string): Observable<FoodDetailsModel> {\r\n    const rawDataSource = this.http.get<{items: Array<FoodDetailsModel>}>('./assets/sample-data/food/details.json')\r\n    .pipe(\r\n      mergeMap(details => details.items.filter(item => item.slug === slug)),\r\n      map(\r\n        (data: FoodDetailsModel) => {\r\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\r\n          // We need to properly cast types from json data\r\n          const details = new FoodDetailsModel();\r\n\r\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\r\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\r\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\r\n          Object.assign(details, data);\r\n\r\n          return details;\r\n        }\r\n      )\r\n    );\r\n\r\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\r\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\r\n    // duplicate http requests.\r\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('food-details-state', rawDataSource);\r\n\r\n    return cachedDataSource;\r\n  }\r\n\r\n  public getDetailsStore(dataSource: Observable<FoodDetailsModel>): DataStore<FoodDetailsModel> {\r\n    // Initialize the model specifying that it is a shell model\r\n    const shellModel: FoodDetailsModel = new FoodDetailsModel();\r\n    this.detailsDataStore = new DataStore(shellModel);\r\n\r\n    // If running in the server, then don't add shell to the Data Store\r\n    // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\r\n    if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\r\n      // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\r\n      this.detailsDataStore.load(dataSource, 0);\r\n    } else { // On browser transitions\r\n      // Trigger the loading mechanism (with shell)\r\n      this.detailsDataStore.load(dataSource);\r\n    }\r\n\r\n    return this.detailsDataStore;\r\n  }\r\n}\r\n","import { ShellModel } from '../../shell/data-store';\r\n\r\nexport class FoodItemModel {\r\n  icon: string;\r\n  image: string;\r\n  name: string;\r\n  address: string;\r\n  priceRange: number;\r\n  rating: number;\r\n  tags: Array<string> = [\r\n    '',\r\n    '',\r\n    ''\r\n  ];\r\n  pictures: Array<string> = [\r\n    '',\r\n    '',\r\n    '',\r\n    '',\r\n    ''\r\n  ];\r\n}\r\n\r\nexport class FoodListingModel extends ShellModel {\r\n  items: Array<FoodItemModel> = [\r\n    new FoodItemModel(),\r\n    new FoodItemModel(),\r\n    new FoodItemModel(),\r\n    new FoodItemModel()\r\n  ];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n"]}