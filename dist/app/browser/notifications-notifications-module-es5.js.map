{"version":3,"sources":["webpack:///src/app/notifications/notifications.resolver.ts","webpack:///src/app/notifications/notifications.page.ts","webpack:///src/app/notifications/notifications.page.html","webpack:///src/app/notifications/notifications.module.ts","webpack:///src/app/notifications/notifications.service.ts"],"names":["NotificationsResolver","notificationsService","dataObservable","getData","source","NotificationsPage","route","subscriptions","data","pipe","resolvedRouteData","subscribe","pageData","notifications","error","console","log","unsubscribe","selector","templateUrl","styleUrls","NotificationsPageModule","forChild","path","component","resolve","imports","declarations","providers","NotificationsService","http","get"],"mappings":"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","file":"notifications-notifications-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Resolve } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { NotificationsService } from './notifications.service';\r\n\r\n@Injectable()\r\nexport class NotificationsResolver implements Resolve<any> {\r\n\r\n  constructor(private notificationsService: NotificationsService) { }\r\n\r\n  resolve() {\r\n    // Base Observable (where we get data from)\r\n    const dataObservable: Observable<any> = this.notificationsService.getData();\r\n\r\n    return { source: dataObservable };\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription, Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-notifications',\r\n  templateUrl: './notifications.page.html',\r\n  styleUrls: [\r\n    './styles/notifications.page.scss',\r\n    './styles/notifications.shell.scss'\r\n  ]\r\n})\r\nexport class NotificationsPage implements OnInit {\r\n  // Gather all component subscription in one place. Can be one Subscription or multiple (chained using the Subscription.add() method)\r\n  subscriptions: Subscription;\r\n\r\n  notifications: any;\r\n\r\n  constructor(private route: ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n    this.subscriptions = this.route.data\r\n    .pipe(\r\n      // Extract data for this page\r\n      switchMap((resolvedRouteData: {source: Observable<any>}) => {\r\n        return resolvedRouteData['data'].source;\r\n      })\r\n    )\r\n    .subscribe((pageData) => {\r\n      this.notifications = pageData;\r\n    }, (error) => console.log(error));\r\n  }\r\n\r\n\r\n  // NOTE: Ionic only calls ngOnDestroy if the page was popped (ex: when navigating back)\r\n  // Since ngOnDestroy might not fire when you navigate from the current page, use ionViewWillLeave to cleanup Subscriptions\r\n  ionViewWillLeave(): void {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","<ion-header>\r\n  <ion-toolbar color=\"primary\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-menu-button></ion-menu-button>\r\n    </ion-buttons>\r\n    <ion-title>\r\n      Notifications\r\n    </ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"notifications-content\">\r\n  <ng-container *ngIf=\"notifications\">\r\n    <ion-item-group>\r\n      <ion-item-divider sticky>\r\n        <ion-label>Today</ion-label>\r\n      </ion-item-divider>\r\n      <ion-item class=\"notification-item\" lines=\"none\" *ngFor=\"let notification of notifications.today\">\r\n        <ion-row class=\"notification-item-wrapper\">\r\n          <ion-col size=\"2\">\r\n            <app-aspect-ratio [ratio]=\"{w: 1, h: 1}\">\r\n              <app-image-shell class=\"notification-image\" [src]=\"notification.image\" [alt]=\"'user image'\"></app-image-shell>\r\n            </app-aspect-ratio>\r\n          </ion-col>\r\n          <ion-col class=\"details-wrapper\">\r\n            <h2 class=\"details-name\">{{ notification.name }}</h2>\r\n            <p class=\"details-description\">{{ notification.message }}</p>\r\n          </ion-col>\r\n          <ion-col size=\"2\" class=\"date-wrapper\">\r\n            <h3 class=\"notification-date\">{{ notification.date }}</h3>\r\n          </ion-col>\r\n        </ion-row>\r\n      </ion-item>\r\n    </ion-item-group>\r\n    <ion-item-group>\r\n      <ion-item-divider sticky>\r\n        <ion-label>Yesterday</ion-label>\r\n      </ion-item-divider>\r\n      <ion-item class=\"notification-item\" lines=\"none\" *ngFor=\"let notification of notifications.yesterday\">\r\n        <ion-row class=\"notification-item-wrapper\">\r\n          <ion-col size=\"2\">\r\n            <app-aspect-ratio [ratio]=\"{w: 1, h: 1}\">\r\n              <app-image-shell class=\"notification-image\" [src]=\"notification.image\" [alt]=\"'user image'\"></app-image-shell>\r\n            </app-aspect-ratio>\r\n          </ion-col>\r\n          <ion-col class=\"details-wrapper\">\r\n            <h2 class=\"details-name\">{{ notification.name }}</h2>\r\n            <p class=\"details-description\">{{ notification.message }}</p>\r\n          </ion-col>\r\n          <ion-col size=\"2\" class=\"date-wrapper\">\r\n            <h3 class=\"notification-date\">{{ notification.date }}</h3>\r\n          </ion-col>\r\n        </ion-row>\r\n      </ion-item>\r\n    </ion-item-group>\r\n  </ng-container>\r\n</ion-content>\r\n","import { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ComponentsModule } from '../components/components.module';\r\n\r\nimport { NotificationsPage } from './notifications.page';\r\nimport { NotificationsResolver } from '../notifications/notifications.resolver';\r\nimport { NotificationsService } from '../notifications/notifications.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    IonicModule,\r\n    CommonModule,\r\n    ComponentsModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: '',\r\n        component: NotificationsPage,\r\n        resolve: {\r\n          data: NotificationsResolver\r\n        }\r\n      }\r\n    ])\r\n  ],\r\n  declarations: [ NotificationsPage ],\r\n  providers: [\r\n    NotificationsResolver,\r\n    NotificationsService\r\n  ]\r\n})\r\nexport class NotificationsPageModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NotificationsService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getData(): Observable<any> {\r\n    return this.http.get<any>('./assets/sample-data/notifications.json');\r\n  }\r\n}\r\n"]}