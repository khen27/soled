{"version":3,"sources":["./src/app/user/profile/user-profile.model.ts","./src/app/user/friends/user-friends.model.ts","./src/app/user/user.service.ts","./src/app/utils/resolver-helper.ts","./src/app/shell/data-store.ts"],"names":[],"mappings":"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","file":"default~user-friends-user-friends-module~user-profile-user-profile-module-es2015.js","sourcesContent":["import { ShellModel } from '../../shell/data-store';\r\n\r\nexport class UserProfileModel extends ShellModel {\r\n  userImage: string;\r\n  name: string;\r\n  membership: string;\r\n  job: string;\r\n  likes: string;\r\n  followers: string;\r\n  following: string;\r\n  about: string;\r\n  friends: Array<{image: string, name: string}> = [\r\n    {\r\n      image: '',\r\n      name: ''\r\n    },\r\n    {\r\n      image: '',\r\n      name: ''\r\n    },\r\n    {\r\n      image: '',\r\n      name: ''\r\n    },\r\n    {\r\n      image: '',\r\n      name: ''\r\n    }\r\n  ];\r\n  photos: Array<string> = [\r\n    '',\r\n    '',\r\n    '',\r\n    ''\r\n  ];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n","import { ShellModel } from '../../shell/data-store';\r\n\r\nexport class UserFriendsModel extends ShellModel {\r\n  friends: Array<{\r\n    image: string,\r\n    name: string,\r\n    job: string,\r\n    followers: string,\r\n    followings: string,\r\n    following: boolean}> = [\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: true\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    }\r\n  ];\r\n  followers: Array<{\r\n    image: string,\r\n    name: string,\r\n    job: string,\r\n    followers: string,\r\n    followings: string,\r\n    following: boolean}> = [\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: true\r\n    }\r\n  ];\r\n  following: Array<{\r\n    image: string,\r\n    name: string,\r\n    job: string,\r\n    followers: string,\r\n    followings: string,\r\n    following: boolean}> = [\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    },\r\n    {\r\n      image: '',\r\n      name: '',\r\n      job: '',\r\n      followers: '',\r\n      followings: '',\r\n      following: false\r\n    }\r\n  ];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { DataStore } from '../shell/data-store';\r\nimport { UserProfileModel } from './profile/user-profile.model';\r\nimport { UserFriendsModel } from './friends/user-friends.model';\r\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  private profileDataStore: DataStore<UserProfileModel>;\r\n  private friendsDataStore: DataStore<UserFriendsModel>;\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: object,\r\n    private transferStateHelper: TransferStateHelper,\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  public getProfileDataSource(): Observable<UserProfileModel> {\r\n    const rawDataSource = this.http.get<UserProfileModel>('./assets/sample-data/user/user-profile.json')\r\n    .pipe(\r\n      map(\r\n        (data: UserProfileModel) => {\r\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\r\n          // We need to properly cast types from json data\r\n          const profile = new UserProfileModel();\r\n\r\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\r\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. profile = {...data};\r\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\r\n          Object.assign(profile, data);\r\n\r\n          return profile;\r\n        }\r\n      )\r\n    );\r\n\r\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\r\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\r\n    // duplicate http requests.\r\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('profile-state', rawDataSource);\r\n\r\n    return cachedDataSource;\r\n  }\r\n\r\n  public getProfileStore(dataSource: Observable<UserProfileModel>): DataStore<UserProfileModel> {\r\n    // Use cache if available\r\n    if (!this.profileDataStore) {\r\n      // Initialize the model specifying that it is a shell model\r\n      const shellModel: UserProfileModel = new UserProfileModel();\r\n      this.profileDataStore = new DataStore(shellModel);\r\n\r\n      // If running in the server, then don't add shell to the Data Store\r\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\r\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\r\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\r\n        this.profileDataStore.load(dataSource, 0);\r\n      } else { // On browser transitions\r\n        // Trigger the loading mechanism (with shell)\r\n        this.profileDataStore.load(dataSource);\r\n      }\r\n    }\r\n\r\n    return this.profileDataStore;\r\n  }\r\n\r\n  public getFriendsDataSource(): Observable<UserFriendsModel> {\r\n    const rawDataSource = this.http.get<UserFriendsModel>('./assets/sample-data/user/user-friends.json')\r\n    .pipe(\r\n      map(\r\n        (data: UserFriendsModel) => {\r\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\r\n          // We need to properly cast types from json data\r\n          const friends = new UserFriendsModel();\r\n\r\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\r\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. friends = {...data};\r\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\r\n          Object.assign(friends, data);\r\n\r\n          return friends;\r\n        }\r\n      )\r\n    );\r\n\r\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\r\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\r\n    // duplicate http requests.\r\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('friends-state', rawDataSource);\r\n\r\n    return cachedDataSource;\r\n  }\r\n\r\n  public getFriendsStore(dataSource: Observable<UserFriendsModel>): DataStore<UserFriendsModel> {\r\n    // Use cache if available\r\n    if (!this.friendsDataStore) {\r\n      // Initialize the model specifying that it is a shell model\r\n      const shellModel: UserFriendsModel = new UserFriendsModel();\r\n      this.friendsDataStore = new DataStore(shellModel);\r\n\r\n      // If running in the server, then don't add shell to the Data Store\r\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\r\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\r\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\r\n        this.friendsDataStore.load(dataSource, 0);\r\n      } else { // On browser transitions\r\n        // Trigger the loading mechanism (with shell)\r\n        this.friendsDataStore.load(dataSource);\r\n      }\r\n    }\r\n\r\n    return this.friendsDataStore;\r\n  }\r\n}\r\n","import { DataStore } from '../shell/data-store';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nexport interface IResolvedRouteData<T> {\r\n  data: T | DataStore<T>;\r\n}\r\n\r\nexport class ResolverHelper<T> {\r\n  // More info on function overloads here: https://www.typescriptlang.org/docs/handbook/functions.html#overloads\r\n  public static extractData<T>(source: (T | DataStore<T>), constructor: (new(...args: any[]) => T)): Observable<T> {\r\n    if (source instanceof DataStore) {\r\n      return source.state;\r\n    } else if (source instanceof constructor) {\r\n      // The right side of instanceof should be an expression evaluating to a constructor function (ie. a class), not a type\r\n      // That's why we included an extra parameter which acts as a constructor function for type T\r\n      // (see: https://github.com/microsoft/TypeScript/issues/5236)\r\n      return of(source);\r\n    }\r\n  }\r\n}\r\n","import { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\r\nimport { delay, map, startWith } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport class ShellModel {\r\n  isShell = false;\r\n}\r\n\r\nexport class DataStore<T> {\r\n  // We wait on purpose 2 secs on local environment when fetching from json to simulate the backend roundtrip.\r\n  // However, in production you should set this delay to 0 in the environment.prod file.\r\n  // tslint:disable-next-line:max-line-length\r\n  private networkDelay = (environment.appShellConfig && environment.appShellConfig.networkDelay) ? environment.appShellConfig.networkDelay : 0;\r\n\r\n  private timeline: ReplaySubject<T & ShellModel> = new ReplaySubject(1);\r\n\r\n  constructor(private shellModel: T) { }\r\n\r\n  // Static function with generics\r\n  // (ref: https://stackoverflow.com/a/24293088/1116959)\r\n  // Append a shell (T & ShellModel) to every value (T) emmited to the timeline\r\n  public static AppendShell<T>(dataObservable: Observable<T>, shellModel: T, networkDelay = 400): Observable<T & ShellModel> {\r\n    const delayObservable = of(true).pipe(\r\n      delay(networkDelay)\r\n    );\r\n\r\n    // Assign shell flag accordingly\r\n    // (ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\r\n    return combineLatest([\r\n      delayObservable,\r\n      dataObservable\r\n    ]).pipe(\r\n      // Dismiss unnecessary delayValue\r\n      map(([delayValue, dataValue]: [boolean, T]): (T & ShellModel) => Object.assign(dataValue, {isShell: false})),\r\n      // Set the shell model as the initial value\r\n      startWith(Object.assign(shellModel, {isShell: true}))\r\n    );\r\n  }\r\n\r\n  load(dataSourceObservable: Observable<T>, networkDelay?: number): void {\r\n    // tslint:disable-next-line:no-shadowed-variable\r\n    const delay = (typeof networkDelay === 'number') ? networkDelay : this.networkDelay;\r\n\r\n    let processedDataSource: Observable<any>;\r\n\r\n    // If no network delay, then don't show shell\r\n    if (delay === 0) {\r\n      processedDataSource = dataSourceObservable;\r\n    } else {\r\n      processedDataSource = DataStore.AppendShell(dataSourceObservable, this.shellModel, delay);\r\n    }\r\n\r\n    processedDataSource\r\n    .subscribe((dataValue: T & ShellModel) => {\r\n      this.timeline.next(dataValue);\r\n    });\r\n  }\r\n\r\n  public get state(): Observable<T & ShellModel> {\r\n    return this.timeline.asObservable();\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}