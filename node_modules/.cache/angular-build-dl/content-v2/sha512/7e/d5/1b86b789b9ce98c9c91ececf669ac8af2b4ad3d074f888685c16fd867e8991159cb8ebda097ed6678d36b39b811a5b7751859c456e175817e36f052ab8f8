{"version":3,"sources":["./node_modules/firebase/firestore/dist/index.esm.js","./src/app/firebase/crud/firebase-crud.module.ts","./node_modules/@angular/fire/__ivy_ngcc__/fesm2015/angular-fire-firestore.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAA6B;AAC7B;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6C;AACU;AACd;AACM;AAEG;AACe;AACD;;;;AAEhE,MAAM,cAAc,GAAW;IAC7B;QACE,IAAI,EAAE,EAAE;QACR,QAAQ,EAAE;YACR,0BAA0B;YAC1B;gBACE,IAAI,EAAE,EAAE;gBACR,UAAU,EAAE,SAAS;gBACrB,SAAS,EAAE,MAAM;aAClB;YACD;gBACE,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE,GAAG,EAAE,CAAC,8UAAmD,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,yBAAyB,CAAC;aAC/G;YACD;gBACE,IAAI,EAAE,aAAa;gBACnB,YAAY,EAAE,GAAG,EAAE,CAAC,oVAAqD,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,6BAA6B,CAAC;aACrH;SACF;KACF;CACF,CAAC;AAWK,MAAM,kBAAkB;;iGAAlB,kBAAkB;8JAAlB,kBAAkB,kBARpB;YACP,0DAAW;YACX,4DAAY;YACZ,4DAAY,CAAC,QAAQ,CAAC,cAAc,CAAC;YACrC,+DAAiB,CAAC,aAAa,CAAC,qEAAW,CAAC,QAAQ,CAAC;YACrD,8EAAsB;SACvB;mIAEU,kBAAkB,cAP3B,0DAAW;QACX,4DAAY,iIAGZ,8EAAsB;6FAGb,kBAAkB;cAT9B,sDAAQ;eAAC;gBACR,OAAO,EAAE;oBACP,0DAAW;oBACX,4DAAY;oBACZ,4DAAY,CAAC,QAAQ,CAAC,cAAc,CAAC;oBACrC,+DAAiB,CAAC,aAAa,CAAC,qEAAW,CAAC,QAAQ,CAAC;oBACrD,8EAAsB;iBACvB;aACF;;;;;;;;;;;;;;ACvCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0I;AAC9E;AACE;AACmF;AAC9F;AACvB;AACQ;;AAEpC;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACwC;AACxC,mCAAmC,mDAAc;AACjD,eAAe,+CAAU;AACzB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,cAAc,0DAAG;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,wCAAwC,0DAAG;AAC3C,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,yBAAyB;AAC1C;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,cAAc,0DAAG;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,EAAE,MAAM,qCAAqC;AACxE;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,cAAc,0DAAG;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,+CAA+C,2DAAI;AACnD,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0EAA0E,0DAAG;AAC7E,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,EAAE,MAAM,2BAA2B;AACzD;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,+EAA+E,0DAAG;AAClF,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wDAAwD,6DAAM;AAC9D,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,8CAA8C,2DAAI;AAClD,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B;AACA,kBAAkB,0DAAG;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mCAAmC,EAAE,mCAAmC,cAAc,EAAE,mBAAmB,0BAA0B;AACrI;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,iDAAI,+BAA+B,gEAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,EAaV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,2CAA2C,0DAAG;AAC9C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,iDAAI,6BAA6B,gEAAS;AACzD;AACA;AACA,WAAW,EAQV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0DAAG;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wDAAwD,6DAAM;AAC9D,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,8CAA8C,2DAAI;AAClD,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,kBAAkB,0DAAG;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,iDAAI,+BAA+B,gEAAS;AAC3D;AACA;AACA,WAAW,EAWV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA,WAAW,EAAE;AACb,oBAAoB,mBAAO,CAAC,iCAAqB;AACjD;AACA;AACA,UAAU;AACV;AACA,+BAA+B,4DAAc;AAC7C,WAAW,EAAE;AACb,iCAAiC,4DAAc;AAC/C,WAAW,EAAE;AACb,qBAAqB,4DAAc;AACnC;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd;AACA;AACA,UAAU,aAAa;AACvB;AACA,IAAI;AACJ,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,yEAAyE;AACpF,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,kDAAkD,aAAa;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,8BAA8B,oEAAsB;AACpD,sCAAsC,oFAA8B;AACpE;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB,yEAAmB;AAC3C;AACA;AACA;AACA;AACA,6BAA6B,EAAE,kDAAkD,EAAE,KAAK,mDAAQ;AAChG;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,wCAAwC,wEAAgB;AACxD;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,wBAAwB;AACxB;AACA;AACA;AACA,2BAA2B,iDAAI;AAC/B,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","file":"firebase-crud-firebase-crud-module-es2015.js","sourcesContent":["import '@firebase/firestore';\r\n//# sourceMappingURL=index.esm.js.map\r\n","import { IonicModule } from '@ionic/angular';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AngularFireModule } from '@angular/fire';\r\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nconst firebaseRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      // /firebase/crud redirect\r\n      {\r\n        path: '',\r\n        redirectTo: 'listing',\r\n        pathMatch: 'full',\r\n      },\r\n      {\r\n        path: 'listing',\r\n        loadChildren: () => import('./../crud/listing/firebase-listing.module').then(m => m.FirebaseListingPageModule)\r\n      },\r\n      {\r\n        path: 'details/:id',\r\n        loadChildren: () => import('./../crud/user/firebase-user-details.module').then(m => m.FirebaseUserDetailsPageModule)\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    IonicModule,\r\n    CommonModule,\r\n    RouterModule.forChild(firebaseRoutes),\r\n    AngularFireModule.initializeApp(environment.firebase),\r\n    AngularFirestoreModule\r\n  ],\r\n})\r\nexport class FirebaseCrudModule {}\r\n","import { InjectionToken, Injectable, Inject, Optional, PLATFORM_ID, NgZone, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';\r\nimport { asyncScheduler, Observable, from, of } from 'rxjs';\r\nimport { map, scan, filter, observeOn } from 'rxjs/operators';\r\nimport { ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory, ɵfirebaseAppFactory, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';\r\nimport { isPlatformServer } from '@angular/common';\r\nimport 'firebase/firestore';\r\nimport firebase from 'firebase/app';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: observable/fromRef.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T, R\r\n * @param {?} ref\r\n * @param {?=} scheduler\r\n * @return {?}\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nfunction _fromRef(ref, scheduler = asyncScheduler) {\r\n    return new Observable((/**\r\n     * @param {?} subscriber\r\n     * @return {?}\r\n     */\r\n    subscriber => {\r\n        /** @type {?} */\r\n        let unsubscribe;\r\n        if (scheduler != null) {\r\n            scheduler.schedule((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                unsubscribe = ref.onSnapshot(subscriber);\r\n            }));\r\n        }\r\n        else {\r\n            unsubscribe = ref.onSnapshot(subscriber);\r\n        }\r\n        return (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (unsubscribe != null) {\r\n                unsubscribe();\r\n            }\r\n        });\r\n    }));\r\n}\r\n/**\r\n * @template R\r\n * @param {?} ref\r\n * @param {?=} scheduler\r\n * @return {?}\r\n */\r\nfunction fromRef(ref, scheduler) {\r\n    return _fromRef(ref, scheduler);\r\n}\r\n/**\r\n * @template T\r\n * @param {?} ref\r\n * @param {?=} scheduler\r\n * @return {?}\r\n */\r\nfunction fromDocRef(ref, scheduler) {\r\n    return fromRef(ref, scheduler)\r\n        .pipe(map((/**\r\n     * @param {?} payload\r\n     * @return {?}\r\n     */\r\n    payload => ({ payload, type: 'value' }))));\r\n}\r\n/**\r\n * @template T\r\n * @param {?} ref\r\n * @param {?=} scheduler\r\n * @return {?}\r\n */\r\nfunction fromCollectionRef(ref, scheduler) {\r\n    return fromRef(ref, scheduler).pipe(map((/**\r\n     * @param {?} payload\r\n     * @return {?}\r\n     */\r\n    payload => ({ payload, type: 'query' }))));\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: collection/changes.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Return a stream of document changes on a query. These results are not in sort order but in\r\n * order of occurence.\r\n * @template T\r\n * @param {?} query\r\n * @param {?=} scheduler\r\n * @return {?}\r\n */\r\nfunction docChanges(query, scheduler) {\r\n    return fromCollectionRef(query, scheduler)\r\n        .pipe(map((/**\r\n     * @param {?} action\r\n     * @return {?}\r\n     */\r\n    action => action.payload.docChanges()\r\n        .map((/**\r\n     * @param {?} change\r\n     * @return {?}\r\n     */\r\n    change => ((/** @type {?} */ ({ type: change.type, payload: change }))))))));\r\n}\r\n/**\r\n * Return a stream of document changes on a query. These results are in sort order.\r\n * @template T\r\n * @param {?} query\r\n * @param {?} events\r\n * @param {?=} scheduler\r\n * @return {?}\r\n */\r\nfunction sortedChanges(query, events, scheduler) {\r\n    return fromCollectionRef(query, scheduler)\r\n        .pipe(map((/**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    changes => changes.payload.docChanges())), scan((/**\r\n     * @param {?} current\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    (current, changes) => combineChanges(current, changes, events)), []), map((/**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    changes => changes.map((/**\r\n     * @param {?} c\r\n     * @return {?}\r\n     */\r\n    c => ((/** @type {?} */ ({ type: c.type, payload: c }))))))));\r\n}\r\n/**\r\n * Combines the total result set from the current set of changes from an incoming set\r\n * of changes.\r\n * @template T\r\n * @param {?} current\r\n * @param {?} changes\r\n * @param {?} events\r\n * @return {?}\r\n */\r\nfunction combineChanges(current, changes, events) {\r\n    changes.forEach((/**\r\n     * @param {?} change\r\n     * @return {?}\r\n     */\r\n    change => {\r\n        // skip unwanted change types\r\n        if (events.indexOf(change.type) > -1) {\r\n            current = combineChange(current, change);\r\n        }\r\n    }));\r\n    return current;\r\n}\r\n/**\r\n * Creates a new sorted array from a new change.\r\n * @template T\r\n * @param {?} combined\r\n * @param {?} change\r\n * @return {?}\r\n */\r\nfunction combineChange(combined, change) {\r\n    switch (change.type) {\r\n        case 'added':\r\n            if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {\r\n                // Not sure why the duplicates are getting fired\r\n            }\r\n            else {\r\n                combined.splice(change.newIndex, 0, change);\r\n            }\r\n            break;\r\n        case 'modified':\r\n            if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\r\n                // When an item changes position we first remove it\r\n                // and then add it's new position\r\n                if (change.oldIndex !== change.newIndex) {\r\n                    combined.splice(change.oldIndex, 1);\r\n                    combined.splice(change.newIndex, 0, change);\r\n                }\r\n                else {\r\n                    combined.splice(change.newIndex, 1, change);\r\n                }\r\n            }\r\n            break;\r\n        case 'removed':\r\n            if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\r\n                combined.splice(change.oldIndex, 1);\r\n            }\r\n            break;\r\n    }\r\n    return combined;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: collection/collection.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @param {?=} events\r\n * @return {?}\r\n */\r\nfunction validateEventsArray(events) {\r\n    if (!events || events.length === 0) {\r\n        events = ['added', 'removed', 'modified'];\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * AngularFirestoreCollection service\r\n *\r\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\r\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\r\n * is generic which gives you type safety for data update methods and data streaming.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const collectionRef = firebase.firestore.collection('stocks');\r\n * const query = collectionRef.where('price', '>', '0.01');\r\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\r\n *\r\n * // NOTE!: the updates are performed on the reference not the query\r\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\r\n *\r\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\r\n * fakeStock.valueChanges().subscribe(value => console.log(value));\r\n * @template T\r\n */\r\nclass AngularFirestoreCollection {\r\n    /**\r\n     * The constructor takes in a CollectionReference and Query to provide wrapper methods\r\n     * for data operations and data streaming.\r\n     *\r\n     * Note: Data operation methods are done on the reference not the query. This means\r\n     * when you update data it is not updating data to the window of your query unless\r\n     * the data fits the criteria of the query. See the AssociatedRefence type for details\r\n     * on this implication.\r\n     * @param {?} ref\r\n     * @param {?} query\r\n     * @param {?} afs\r\n     */\r\n    constructor(ref, query, afs) {\r\n        this.ref = ref;\r\n        this.query = query;\r\n        this.afs = afs;\r\n    }\r\n    /**\r\n     * Listen to the latest change in the stream. This method returns changes\r\n     * as they occur and they are not sorted by query order. This allows you to construct\r\n     * your own data structure.\r\n     * @param {?=} events\r\n     * @return {?}\r\n     */\r\n    stateChanges(events) {\r\n        if (!events || events.length === 0) {\r\n            return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);\r\n        }\r\n        return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(map((/**\r\n         * @param {?} actions\r\n         * @return {?}\r\n         */\r\n        actions => actions.filter((/**\r\n         * @param {?} change\r\n         * @return {?}\r\n         */\r\n        change => events.indexOf(change.type) > -1)))), filter((/**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        changes => changes.length > 0)), this.afs.keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\r\n     * but it collects each event in an array over time.\r\n     * @param {?=} events\r\n     * @return {?}\r\n     */\r\n    auditTrail(events) {\r\n        return this.stateChanges(events).pipe(scan((/**\r\n         * @param {?} current\r\n         * @param {?} action\r\n         * @return {?}\r\n         */\r\n        (current, action) => [...current, ...action]), []));\r\n    }\r\n    /**\r\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\r\n     * query order.\r\n     * @param {?=} events\r\n     * @return {?}\r\n     */\r\n    snapshotChanges(events) {\r\n        /** @type {?} */\r\n        const validatedEvents = validateEventsArray(events);\r\n        /** @type {?} */\r\n        const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\r\n        return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * @template K\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    valueChanges(options = {}) {\r\n        return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular)\r\n            .pipe(map((/**\r\n         * @param {?} actions\r\n         * @return {?}\r\n         */\r\n        actions => actions.payload.docs.map((/**\r\n         * @param {?} a\r\n         * @return {?}\r\n         */\r\n        a => {\r\n            if (options.idField) {\r\n                return (/** @type {?} */ (Object.assign(Object.assign({}, (/** @type {?} */ (a.data()))), { [options.idField]: a.id })));\r\n            }\r\n            else {\r\n                return a.data();\r\n            }\r\n        })))), this.afs.keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Retrieve the results of the query once.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    get(options) {\r\n        return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\r\n    }\r\n    /**\r\n     * Add data to a collection reference.\r\n     *\r\n     * Note: Data operation methods are done on the reference not the query. This means\r\n     * when you update data it is not updating data to the window of your query unless\r\n     * the data fits the criteria of the query.\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\r\n    add(data) {\r\n        return this.ref.add(data);\r\n    }\r\n    /**\r\n     * Create a reference to a single document in a collection.\r\n     * @template T\r\n     * @param {?=} path\r\n     * @return {?}\r\n     */\r\n    doc(path) {\r\n        return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    AngularFirestoreCollection.prototype.ref;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    AngularFirestoreCollection.prototype.query;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    AngularFirestoreCollection.prototype.afs;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: document/document.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * AngularFirestoreDocument service\r\n *\r\n * This class creates a reference to a Firestore Document. A reference is provided in\r\n * in the constructor. The class is generic which gives you type safety for data update\r\n * methods and data streaming.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\r\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\r\n * fakeStock.valueChanges().map(snap => {\r\n *   if(snap.exists) return snap.data();\r\n *   return null;\r\n * }).subscribe(value => console.log(value));\r\n * // OR! Transform using Observable.from() and the data is unwrapped for you\r\n * Observable.from(fakeStock).subscribe(value => console.log(value));\r\n * @template T\r\n */\r\nclass AngularFirestoreDocument {\r\n    /**\r\n     * The contstuctor takes in a DocumentReference to provide wrapper methods\r\n     * for data operations, data streaming, and Symbol.observable.\r\n     * @param {?} ref\r\n     * @param {?} afs\r\n     */\r\n    constructor(ref, afs) {\r\n        this.ref = ref;\r\n        this.afs = afs;\r\n    }\r\n    /**\r\n     * Create or overwrite a single document.\r\n     * @param {?} data\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    set(data, options) {\r\n        return this.ref.set(data, options);\r\n    }\r\n    /**\r\n     * Update some fields of a document without overwriting the entire document.\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\r\n    update(data) {\r\n        return this.ref.update(data);\r\n    }\r\n    /**\r\n     * Delete a document.\r\n     * @return {?}\r\n     */\r\n    delete() {\r\n        return this.ref.delete();\r\n    }\r\n    /**\r\n     * Create a reference to a sub-collection given a path and an optional query\r\n     * function.\r\n     * @template R\r\n     * @param {?} path\r\n     * @param {?=} queryFn\r\n     * @return {?}\r\n     */\r\n    collection(path, queryFn) {\r\n        /** @type {?} */\r\n        const collectionRef = this.ref.collection(path);\r\n        const { ref, query } = associateQuery(collectionRef, queryFn);\r\n        return new AngularFirestoreCollection(ref, query, this.afs);\r\n    }\r\n    /**\r\n     * Listen to snapshot updates from the document.\r\n     * @return {?}\r\n     */\r\n    snapshotChanges() {\r\n        /** @type {?} */\r\n        const scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);\r\n        return scheduledFromDocRef$.pipe(this.afs.keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Listen to unwrapped snapshot updates from the document.\r\n     * @return {?}\r\n     */\r\n    valueChanges() {\r\n        return this.snapshotChanges().pipe(map((/**\r\n         * @param {?} action\r\n         * @return {?}\r\n         */\r\n        action => {\r\n            return action.payload.data();\r\n        })));\r\n    }\r\n    /**\r\n     * Retrieve the document once.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    get(options) {\r\n        return from(this.ref.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    AngularFirestoreDocument.prototype.ref;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    AngularFirestoreDocument.prototype.afs;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: collection-group/collection-group.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * AngularFirestoreCollectionGroup service\r\n *\r\n * This class holds a reference to a Firestore Collection Group Query.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\r\n * const query = collectionRef.where('price', '>', '0.01');\r\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\r\n *\r\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\r\n * fakeStock.valueChanges().subscribe(value => console.log(value));\r\n * @template T\r\n */\r\nclass AngularFirestoreCollectionGroup {\r\n    /**\r\n     * The constructor takes in a CollectionGroupQuery to provide wrapper methods\r\n     * for data operations and data streaming.\r\n     * @param {?} query\r\n     * @param {?} afs\r\n     */\r\n    constructor(query, afs) {\r\n        this.query = query;\r\n        this.afs = afs;\r\n    }\r\n    /**\r\n     * Listen to the latest change in the stream. This method returns changes\r\n     * as they occur and they are not sorted by query order. This allows you to construct\r\n     * your own data structure.\r\n     * @param {?=} events\r\n     * @return {?}\r\n     */\r\n    stateChanges(events) {\r\n        if (!events || events.length === 0) {\r\n            return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);\r\n        }\r\n        return docChanges(this.query, this.afs.schedulers.outsideAngular)\r\n            .pipe(map((/**\r\n         * @param {?} actions\r\n         * @return {?}\r\n         */\r\n        actions => actions.filter((/**\r\n         * @param {?} change\r\n         * @return {?}\r\n         */\r\n        change => events.indexOf(change.type) > -1)))), filter((/**\r\n         * @param {?} changes\r\n         * @return {?}\r\n         */\r\n        changes => changes.length > 0)), this.afs.keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\r\n     * but it collects each event in an array over time.\r\n     * @param {?=} events\r\n     * @return {?}\r\n     */\r\n    auditTrail(events) {\r\n        return this.stateChanges(events).pipe(scan((/**\r\n         * @param {?} current\r\n         * @param {?} action\r\n         * @return {?}\r\n         */\r\n        (current, action) => [...current, ...action]), []));\r\n    }\r\n    /**\r\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\r\n     * query order.\r\n     * @param {?=} events\r\n     * @return {?}\r\n     */\r\n    snapshotChanges(events) {\r\n        /** @type {?} */\r\n        const validatedEvents = validateEventsArray(events);\r\n        /** @type {?} */\r\n        const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\r\n        return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Listen to all documents in the collection and its possible query as an Observable.\r\n     * @return {?}\r\n     */\r\n    valueChanges() {\r\n        /** @type {?} */\r\n        const fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\r\n        return fromCollectionRefScheduled$\r\n            .pipe(map((/**\r\n         * @param {?} actions\r\n         * @return {?}\r\n         */\r\n        actions => actions.payload.docs.map((/**\r\n         * @param {?} a\r\n         * @return {?}\r\n         */\r\n        a => a.data())))), this.afs.keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Retrieve the results of the query once.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    get(options) {\r\n        return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    AngularFirestoreCollectionGroup.prototype.query;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    AngularFirestoreCollectionGroup.prototype.afs;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: firestore.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst atFirestore = require('@firebase/firestore');\r\n/**\r\n * The value of this token determines whether or not the firestore will have persistance enabled\r\n * @type {?}\r\n */\r\nconst ENABLE_PERSISTENCE = new InjectionToken('angularfire2.enableFirestorePersistence');\r\n/** @type {?} */\r\nconst PERSISTENCE_SETTINGS = new InjectionToken('angularfire2.firestore.persistenceSettings');\r\n/** @type {?} */\r\nconst SETTINGS = new InjectionToken('angularfire2.firestore.settings');\r\n/**\r\n * A utility methods for associating a collection reference with\r\n * a query.\r\n *\r\n * @param {?} collectionRef - A collection reference to query\r\n * @param {?=} queryFn - The callback to create a query\r\n *\r\n * Example:\r\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\r\n *  return ref.where('age', '<', 200);\r\n * });\r\n * @return {?}\r\n */\r\nfunction associateQuery(collectionRef, queryFn = (/**\r\n * @param {?} ref\r\n * @return {?}\r\n */\r\nref => ref)) {\r\n    /** @type {?} */\r\n    const query = queryFn(collectionRef);\r\n    /** @type {?} */\r\n    const ref = collectionRef;\r\n    return { query, ref };\r\n}\r\n/**\r\n * AngularFirestore Service\r\n *\r\n * This service is the main entry point for this feature module. It provides\r\n * an API for creating Collection and Reference services. These services can\r\n * then be used to do data updates and observable streams of the data.\r\n *\r\n * Example:\r\n *\r\n * import { Component } from '\\@angular/core';\r\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '\\@angular/fire/firestore';\r\n * import { Observable } from 'rxjs/Observable';\r\n * import { from } from 'rxjs/observable';\r\n *\r\n * \\@Component({\r\n *   selector: 'app-my-component',\r\n *   template: `\r\n *    <h2>Items for {{ (profile | async)?.name }}\r\n *    <ul>\r\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\r\n *    </ul>\r\n *    <div class=\"control-input\">\r\n *       <input type=\"text\" #itemname />\r\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\r\n *    </div>\r\n *   `\r\n * })\r\n * export class MyComponent implements OnInit {\r\n *\r\n *   // services for data operations and data streaming\r\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\r\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\r\n *\r\n *   // observables for template\r\n *   items: Observable<Item[]>;\r\n *   profile: Observable<Profile>;\r\n *\r\n *   // inject main service\r\n *   constructor(private readonly afs: AngularFirestore) {}\r\n *\r\n *   ngOnInit() {\r\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\r\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\r\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\r\n *\r\n *     this.profileRef = afs.doc('users/davideast');\r\n *     this.profile = this.profileRef.valueChanges();\r\n *   }\r\n *\r\n *   addItem(name: string) {\r\n *     const user = 'davideast';\r\n *     this.itemsRef.add({ name, user });\r\n *   }\r\n * }\r\n */\r\nclass AngularFirestore {\r\n    /**\r\n     * Each Feature of AngularFire has a FirebaseApp injected. This way we\r\n     * don't rely on the main Firebase App instance and we can create named\r\n     * apps and use multiple apps.\r\n     * @param {?} options\r\n     * @param {?} nameOrConfig\r\n     * @param {?} shouldEnablePersistence\r\n     * @param {?} settings\r\n     * @param {?} platformId\r\n     * @param {?} zone\r\n     * @param {?} persistenceSettings\r\n     */\r\n    constructor(options, nameOrConfig, shouldEnablePersistence, settings, \r\n    // tslint:disable-next-line:ban-types\r\n    platformId, zone, persistenceSettings) {\r\n        this.schedulers = new ɵAngularFireSchedulers(zone);\r\n        this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);\r\n        this.firestore = zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\r\n            // INVESTIGATE this seems to be required because in the browser build registerFirestore is an Object?\r\n            //             seems like we're fighting ngcc. In the server firestore() isn't available, so I have to register\r\n            //             in the browser registerFirestore is not a function... maybe this is an underlying firebase-js-sdk issue\r\n            if ('registerFirestore' in atFirestore) {\r\n                ((/** @type {?} */ (atFirestore))).registerFirestore((/** @type {?} */ (firebase)));\r\n            }\r\n            /** @type {?} */\r\n            const firestore = app.firestore();\r\n            if (settings) {\r\n                firestore.settings(settings);\r\n            }\r\n            return firestore;\r\n        }));\r\n        if (shouldEnablePersistence && !isPlatformServer(platformId)) {\r\n            // We need to try/catch here because not all enablePersistence() failures are caught\r\n            // https://github.com/firebase/firebase-js-sdk/issues/608\r\n            /** @type {?} */\r\n            const enablePersistence = (/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                try {\r\n                    return from(this.firestore.enablePersistence(persistenceSettings || undefined).then((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => true), (/**\r\n                     * @return {?}\r\n                     */\r\n                    () => false)));\r\n                }\r\n                catch (e) {\r\n                    return of(false);\r\n                }\r\n            });\r\n            this.persistenceEnabled$ = zone.runOutsideAngular(enablePersistence);\r\n        }\r\n        else {\r\n            this.persistenceEnabled$ = of(false);\r\n        }\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} pathOrRef\r\n     * @param {?=} queryFn\r\n     * @return {?}\r\n     */\r\n    collection(pathOrRef, queryFn) {\r\n        /** @type {?} */\r\n        let collectionRef;\r\n        if (typeof pathOrRef === 'string') {\r\n            collectionRef = this.firestore.collection(pathOrRef);\r\n        }\r\n        else {\r\n            collectionRef = pathOrRef;\r\n        }\r\n        const { ref, query } = associateQuery(collectionRef, queryFn);\r\n        /** @type {?} */\r\n        const refInZone = this.schedulers.ngZone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => ref));\r\n        return new AngularFirestoreCollection(refInZone, query, this);\r\n    }\r\n    /**\r\n     * Create a reference to a Firestore Collection Group based on a collectionId\r\n     * and an optional query function to narrow the result\r\n     * set.\r\n     * @template T\r\n     * @param {?} collectionId\r\n     * @param {?=} queryGroupFn\r\n     * @return {?}\r\n     */\r\n    collectionGroup(collectionId, queryGroupFn) {\r\n        /** @type {?} */\r\n        const queryFn = queryGroupFn || ((/**\r\n         * @param {?} ref\r\n         * @return {?}\r\n         */\r\n        ref => ref));\r\n        /** @type {?} */\r\n        const collectionGroup = this.firestore.collectionGroup(collectionId);\r\n        return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} pathOrRef\r\n     * @return {?}\r\n     */\r\n    doc(pathOrRef) {\r\n        /** @type {?} */\r\n        let ref;\r\n        if (typeof pathOrRef === 'string') {\r\n            ref = this.firestore.doc(pathOrRef);\r\n        }\r\n        else {\r\n            ref = pathOrRef;\r\n        }\r\n        /** @type {?} */\r\n        const refInZone = this.schedulers.ngZone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => ref));\r\n        return new AngularFirestoreDocument(refInZone, this);\r\n    }\r\n    /**\r\n     * Returns a generated Firestore Document Id.\r\n     * @return {?}\r\n     */\r\n    createId() {\r\n        return this.firestore.collection('_').doc().id;\r\n    }\r\n}\r\nAngularFirestore.ɵfac = function AngularFirestore_Factory(t) { return new (t || AngularFirestore)(ɵngcc0.ɵɵinject(FIREBASE_OPTIONS), ɵngcc0.ɵɵinject(FIREBASE_APP_NAME, 8), ɵngcc0.ɵɵinject(ENABLE_PERSISTENCE, 8), ɵngcc0.ɵɵinject(SETTINGS, 8), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PERSISTENCE_SETTINGS, 8)); };\r\n/** @nocollapse */\r\nAngularFirestore.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [FIREBASE_OPTIONS,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FIREBASE_APP_NAME,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ENABLE_PERSISTENCE,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SETTINGS,] }] },\r\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\r\n    { type: NgZone },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [PERSISTENCE_SETTINGS,] }] }\r\n];\r\n/** @nocollapse */ AngularFirestore.ɵprov = ɵɵdefineInjectable({ factory: function AngularFirestore_Factory() { return new AngularFirestore(ɵɵinject(FIREBASE_OPTIONS), ɵɵinject(FIREBASE_APP_NAME, 8), ɵɵinject(ENABLE_PERSISTENCE, 8), ɵɵinject(SETTINGS, 8), ɵɵinject(PLATFORM_ID), ɵɵinject(NgZone), ɵɵinject(PERSISTENCE_SETTINGS, 8)); }, token: AngularFirestore, providedIn: \"any\" });\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFirestore, [{\r\n        type: Injectable,\r\n        args: [{\r\n                providedIn: 'any'\r\n            }]\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [FIREBASE_OPTIONS]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [FIREBASE_APP_NAME]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [ENABLE_PERSISTENCE]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [SETTINGS]\r\n            }] }, { type: Object, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [PERSISTENCE_SETTINGS]\r\n            }] }]; }, null); })();\r\nif (false) {\r\n    /** @type {?} */\r\n    AngularFirestore.prototype.firestore;\r\n    /** @type {?} */\r\n    AngularFirestore.prototype.persistenceEnabled$;\r\n    /** @type {?} */\r\n    AngularFirestore.prototype.schedulers;\r\n    /** @type {?} */\r\n    AngularFirestore.prototype.keepUnstableUntilFirst;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: firestore.module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass AngularFirestoreModule {\r\n    /**\r\n     * Attempt to enable persistent storage, if possible\r\n     * @param {?=} persistenceSettings\r\n     * @return {?}\r\n     */\r\n    static enablePersistence(persistenceSettings) {\r\n        return {\r\n            ngModule: AngularFirestoreModule,\r\n            providers: [\r\n                { provide: ENABLE_PERSISTENCE, useValue: true },\r\n                { provide: PERSISTENCE_SETTINGS, useValue: persistenceSettings },\r\n            ]\r\n        };\r\n    }\r\n}\r\nAngularFirestoreModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularFirestoreModule });\r\nAngularFirestoreModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularFirestoreModule_Factory(t) { return new (t || AngularFirestoreModule)(); }, providers: [AngularFirestore] });\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFirestoreModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                providers: [AngularFirestore]\r\n            }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: interfaces.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @record\r\n * @template T\r\n */\r\nfunction DocumentSnapshotExists() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    DocumentSnapshotExists.prototype.exists;\r\n    /**\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    DocumentSnapshotExists.prototype.data = function (options) { };\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction DocumentSnapshotDoesNotExist() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    DocumentSnapshotDoesNotExist.prototype.exists;\r\n    /**\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    DocumentSnapshotDoesNotExist.prototype.data = function (options) { };\r\n    /**\r\n     * @param {?} fieldPath\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    DocumentSnapshotDoesNotExist.prototype.get = function (fieldPath, options) { };\r\n}\r\n/**\r\n * @record\r\n * @template T\r\n */\r\nfunction QueryDocumentSnapshot() { }\r\nif (false) {\r\n    /**\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    QueryDocumentSnapshot.prototype.data = function (options) { };\r\n}\r\n/**\r\n * @record\r\n * @template T\r\n */\r\nfunction QuerySnapshot() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    QuerySnapshot.prototype.docs;\r\n}\r\n/**\r\n * @record\r\n * @template T\r\n */\r\nfunction DocumentChange() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    DocumentChange.prototype.doc;\r\n}\r\n/**\r\n * @record\r\n * @template T\r\n */\r\nfunction DocumentChangeAction() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    DocumentChangeAction.prototype.type;\r\n    /** @type {?} */\r\n    DocumentChangeAction.prototype.payload;\r\n}\r\n/**\r\n * @record\r\n * @template T\r\n */\r\nfunction Action() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    Action.prototype.type;\r\n    /** @type {?} */\r\n    Action.prototype.payload;\r\n}\r\n/**\r\n * @record\r\n * @template T\r\n */\r\nfunction Reference() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    Reference.prototype.onSnapshot;\r\n}\r\n/**\r\n * A structure that provides an association between a reference\r\n * and a query on that reference. Note: Performing operations\r\n * on the reference can lead to confusing results with complicated\r\n * queries.\r\n *\r\n * Example:\r\n *\r\n * const query = ref.where('type', '==', 'Book').\r\n *                  .where('price', '>' 18.00)\r\n *                  .where('price', '<' 100.00)\r\n *                  .where('category', '==', 'Fiction')\r\n *                  .where('publisher', '==', 'BigPublisher')\r\n *\r\n * // This addition would not be a result of the query above\r\n * ref.add({\r\n *  type: 'Magazine',\r\n *  price: 4.99,\r\n *  category: 'Sports',\r\n *  publisher: 'SportsPublisher'\r\n * });\r\n * @record\r\n */\r\nfunction AssociatedReference() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    AssociatedReference.prototype.ref;\r\n    /** @type {?} */\r\n    AssociatedReference.prototype.query;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: public_api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: angular-fire-firestore.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreCollectionGroup, AngularFirestoreDocument, AngularFirestoreModule, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS, SETTINGS, associateQuery, combineChange, combineChanges, docChanges, fromCollectionRef, fromDocRef, fromRef, sortedChanges, validateEventsArray };\r\n\r\n//# sourceMappingURL=angular-fire-firestore.js.map"],"sourceRoot":"webpack:///"}