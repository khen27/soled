{"version":3,"sources":["webpack:///src/app/fashion/fashion.service.ts","webpack:///src/app/fashion/details/fashion-details.model.ts","webpack:///src/app/utils/resolver-helper.ts","webpack:///src/app/shell/data-store.ts","webpack:///src/app/fashion/listing/fashion-listing.model.ts"],"names":["FashionService","platformId","transferStateHelper","http","rawDataSource","get","pipe","data","listing","Object","assign","cachedDataSource","checkDataSourceState","dataSource","listingDataStore","shellModel","load","details","detailsDataStore","FashionDetailsModel","showcaseImages","type","source","colorVariants","name","value","sizeVariants","relatedProducts","id","ResolverHelper","constructor","state","ShellModel","isShell","DataStore","networkDelay","appShellConfig","timeline","dataSourceObservable","delay","processedDataSource","AppendShell","subscribe","dataValue","next","asObservable","dataObservable","delayObservable","delayValue","FashionItemModel","FashionListingModel","items"],"mappings":"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","file":"default~fashion-details-fashion-details-module~fashion-listing-fashion-listing-module-es5.js","sourcesContent":["import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\nimport { DataStore } from '../shell/data-store';\r\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\r\nimport { FashionListingModel } from './listing/fashion-listing.model';\r\nimport { FashionDetailsModel } from './details/fashion-details.model';\r\n\r\n@Injectable()\r\nexport class FashionService {\r\n  private listingDataStore: DataStore<FashionListingModel>;\r\n  private detailsDataStore: DataStore<FashionDetailsModel>;\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: object,\r\n    private transferStateHelper: TransferStateHelper,\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  public getListingDataSource(): Observable<FashionListingModel> {\r\n    const rawDataSource = this.http.get<FashionListingModel>('./assets/sample-data/fashion/listing.json')\r\n    .pipe(\r\n      map(\r\n        (data: FashionListingModel) => {\r\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\r\n          // We need to properly cast types from json data\r\n          const listing = new FashionListingModel();\r\n\r\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\r\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\r\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\r\n          Object.assign(listing, data);\r\n\r\n          return listing;\r\n        }\r\n      )\r\n    );\r\n\r\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\r\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\r\n    // duplicate http requests.\r\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('fashion-listing-state', rawDataSource);\r\n\r\n    return cachedDataSource;\r\n  }\r\n\r\n  public getListingStore(dataSource: Observable<FashionListingModel>): DataStore<FashionListingModel> {\r\n    // Check if we already loaded this object\r\n    if (!this.listingDataStore) {\r\n      // Initialize the model specifying that it is a shell model\r\n      const shellModel: FashionListingModel = new FashionListingModel();\r\n      this.listingDataStore = new DataStore(shellModel);\r\n\r\n      // If running in the server, then don't add shell to the Data Store\r\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\r\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\r\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\r\n        this.listingDataStore.load(dataSource, 0);\r\n      } else { // On browser transitions\r\n        // Trigger the loading mechanism (with shell)\r\n        this.listingDataStore.load(dataSource);\r\n      }\r\n    }\r\n\r\n    return this.listingDataStore;\r\n  }\r\n\r\n  public getDetailsDataSource(): Observable<FashionDetailsModel> {\r\n    const rawDataSource = this.http.get<FashionDetailsModel>('./assets/sample-data/fashion/details.json')\r\n    .pipe(\r\n      map(\r\n        (data: FashionDetailsModel) => {\r\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\r\n          // We need to properly cast types from json data\r\n          const details = new FashionDetailsModel();\r\n\r\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\r\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\r\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\r\n          Object.assign(details, data);\r\n\r\n          return details;\r\n        }\r\n      )\r\n    );\r\n\r\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\r\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\r\n    // duplicate http requests.\r\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('fashion-details-state', rawDataSource);\r\n\r\n    return cachedDataSource;\r\n  }\r\n\r\n  public getDetailsStore(dataSource: Observable<FashionDetailsModel>): DataStore<FashionDetailsModel> {\r\n    // Check if we already loaded this object\r\n    if (!this.detailsDataStore) {\r\n      // Initialize the model specifying that it is a shell model\r\n      const shellModel: FashionDetailsModel = new FashionDetailsModel();\r\n      this.detailsDataStore = new DataStore(shellModel);\r\n\r\n      // If running in the server, then don't add shell to the Data Store\r\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\r\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\r\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\r\n        this.detailsDataStore.load(dataSource, 0);\r\n      } else { // On browser transitions\r\n        // Trigger the loading mechanism (with shell)\r\n        this.detailsDataStore.load(dataSource);\r\n      }\r\n    }\r\n\r\n    return this.detailsDataStore;\r\n  }\r\n}\r\n","import { ShellModel } from '../../shell/data-store';\r\n\r\nexport class FashionDetailsModel extends ShellModel {\r\n  showcaseImages: Array<{type: string, source: string}> = [\r\n    {\r\n      type: '',\r\n      source: ''\r\n    },\r\n    {\r\n      type: '',\r\n      source: ''\r\n    },\r\n    {\r\n      type: '',\r\n      source: ''\r\n    }\r\n  ];\r\n  name: string;\r\n  brand: string;\r\n  price: number;\r\n  salePrice: number;\r\n  colorVariants: Array<{name: string, value: string, default: boolean}> = [\r\n    {\r\n      name: '',\r\n      value: '',\r\n      default: false\r\n    },\r\n    {\r\n      name: '',\r\n      value: '',\r\n      default: false\r\n    },\r\n    {\r\n      name: '',\r\n      value: '',\r\n      default: false\r\n    }\r\n  ];\r\n  sizeVariants: Array<{name: string, value: string, default: boolean}> = [\r\n    {\r\n      name: '',\r\n      value: '',\r\n      default: false\r\n    },\r\n    {\r\n      name: '',\r\n      value: '',\r\n      default: false\r\n    },\r\n    {\r\n      name: '',\r\n      value: '',\r\n      default: false\r\n    }\r\n  ];\r\n  description: string;\r\n  careInstructions: string;\r\n  upc: string;\r\n  relatedProducts: Array<{id: number}> = [\r\n    {\r\n      id: null\r\n    },\r\n    {\r\n      id: null\r\n    }\r\n  ];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n","import { DataStore } from '../shell/data-store';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nexport interface IResolvedRouteData<T> {\r\n  data: T | DataStore<T>;\r\n}\r\n\r\nexport class ResolverHelper<T> {\r\n  // More info on function overloads here: https://www.typescriptlang.org/docs/handbook/functions.html#overloads\r\n  public static extractData<T>(source: (T | DataStore<T>), constructor: (new(...args: any[]) => T)): Observable<T> {\r\n    if (source instanceof DataStore) {\r\n      return source.state;\r\n    } else if (source instanceof constructor) {\r\n      // The right side of instanceof should be an expression evaluating to a constructor function (ie. a class), not a type\r\n      // That's why we included an extra parameter which acts as a constructor function for type T\r\n      // (see: https://github.com/microsoft/TypeScript/issues/5236)\r\n      return of(source);\r\n    }\r\n  }\r\n}\r\n","import { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\r\nimport { delay, map, startWith } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport class ShellModel {\r\n  isShell = false;\r\n}\r\n\r\nexport class DataStore<T> {\r\n  // We wait on purpose 2 secs on local environment when fetching from json to simulate the backend roundtrip.\r\n  // However, in production you should set this delay to 0 in the environment.prod file.\r\n  // tslint:disable-next-line:max-line-length\r\n  private networkDelay = (environment.appShellConfig && environment.appShellConfig.networkDelay) ? environment.appShellConfig.networkDelay : 0;\r\n\r\n  private timeline: ReplaySubject<T & ShellModel> = new ReplaySubject(1);\r\n\r\n  constructor(private shellModel: T) { }\r\n\r\n  // Static function with generics\r\n  // (ref: https://stackoverflow.com/a/24293088/1116959)\r\n  // Append a shell (T & ShellModel) to every value (T) emmited to the timeline\r\n  public static AppendShell<T>(dataObservable: Observable<T>, shellModel: T, networkDelay = 400): Observable<T & ShellModel> {\r\n    const delayObservable = of(true).pipe(\r\n      delay(networkDelay)\r\n    );\r\n\r\n    // Assign shell flag accordingly\r\n    // (ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\r\n    return combineLatest([\r\n      delayObservable,\r\n      dataObservable\r\n    ]).pipe(\r\n      // Dismiss unnecessary delayValue\r\n      map(([delayValue, dataValue]: [boolean, T]): (T & ShellModel) => Object.assign(dataValue, {isShell: false})),\r\n      // Set the shell model as the initial value\r\n      startWith(Object.assign(shellModel, {isShell: true}))\r\n    );\r\n  }\r\n\r\n  load(dataSourceObservable: Observable<T>, networkDelay?: number): void {\r\n    // tslint:disable-next-line:no-shadowed-variable\r\n    const delay = (typeof networkDelay === 'number') ? networkDelay : this.networkDelay;\r\n\r\n    let processedDataSource: Observable<any>;\r\n\r\n    // If no network delay, then don't show shell\r\n    if (delay === 0) {\r\n      processedDataSource = dataSourceObservable;\r\n    } else {\r\n      processedDataSource = DataStore.AppendShell(dataSourceObservable, this.shellModel, delay);\r\n    }\r\n\r\n    processedDataSource\r\n    .subscribe((dataValue: T & ShellModel) => {\r\n      this.timeline.next(dataValue);\r\n    });\r\n  }\r\n\r\n  public get state(): Observable<T & ShellModel> {\r\n    return this.timeline.asObservable();\r\n  }\r\n}\r\n","import { ShellModel } from '../../shell/data-store';\r\n\r\nexport class FashionItemModel {\r\n  price: number;\r\n  salePrice: number;\r\n  image: string;\r\n  squareImage: string;\r\n  showcaseImages: Array<string>;\r\n  name: string;\r\n  style: string;\r\n  relatedProducts: Array<string>;\r\n}\r\n\r\nexport class FashionListingModel extends ShellModel {\r\n  items: Array<FashionItemModel> = [\r\n    new FashionItemModel(),\r\n    new FashionItemModel(),\r\n    new FashionItemModel(),\r\n    new FashionItemModel()\r\n  ];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n"]}