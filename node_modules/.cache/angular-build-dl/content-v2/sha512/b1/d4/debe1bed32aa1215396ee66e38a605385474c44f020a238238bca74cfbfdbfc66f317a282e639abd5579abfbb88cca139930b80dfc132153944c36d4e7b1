{"version":3,"sources":["webpack:///src/app/real-estate/listing/real-estate-listing.model.ts","webpack:///src/app/real-estate/details/real-estate-details.model.ts","webpack:///src/app/utils/resolver-helper.ts","webpack:///src/app/shell/data-store.ts","webpack:///src/app/real-estate/real-estate.service.ts"],"names":["RealEstateItemModel","amenities","name","icon","RealEstateListingModel","items","RealEstateDetailsModel","ResolverHelper","source","constructor","state","ShellModel","isShell","DataStore","shellModel","networkDelay","appShellConfig","timeline","dataSourceObservable","delay","processedDataSource","AppendShell","subscribe","dataValue","next","asObservable","dataObservable","delayObservable","pipe","delayValue","Object","assign","RealEstateService","platformId","transferStateHelper","http","rawDataSource","get","data","listing","cachedDataSource","checkDataSourceState","dataSource","listingDataStore","load","details","detailsDataStore"],"mappings":"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","file":"default~real-estate-details-real-estate-details-module~real-estate-listing-real-estate-listing-module-es5.js","sourcesContent":["import { ShellModel } from '../../shell/data-store';\r\n\r\nexport class RealEstateItemModel {\r\n  slug: string;\r\n  picture: string;\r\n  address: string;\r\n  price: string;\r\n  liked: boolean;\r\n  accommodations: {\r\n    guests: number,\r\n    bedrooms: number,\r\n    beds: number,\r\n    bathrooms: number\r\n  };\r\n  amenities: Array<{name: string, icon: string}> = [\r\n    {\r\n      name: '',\r\n      icon: ''\r\n    },\r\n    {\r\n      name: '',\r\n      icon: ''\r\n    }\r\n  ];\r\n}\r\n\r\nexport class RealEstateListingModel extends ShellModel {\r\n  items: Array<RealEstateItemModel> = [\r\n    new RealEstateItemModel(),\r\n    new RealEstateItemModel(),\r\n    new RealEstateItemModel(),\r\n    new RealEstateItemModel()\r\n  ];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n","import { ShellModel } from '../../shell/data-store';\r\n\r\nexport class RealEstateDetailsModel extends ShellModel {\r\n  picture: string;\r\n  location: {\r\n    address: string,\r\n    city: string,\r\n    latlng: string,\r\n    mapImage: string\r\n  };\r\n  description: string;\r\n  price: string;\r\n  accommodations: {\r\n    guests: number,\r\n    bedrooms: number,\r\n    patios: number,\r\n    bathrooms: number\r\n  };\r\n  amenities: Array<{name: string, icon: string}> = [\r\n    {\r\n      name: '',\r\n      icon: ''\r\n    },\r\n    {\r\n      name: '',\r\n      icon: ''\r\n    },\r\n    {\r\n      name: '',\r\n      icon: ''\r\n    },\r\n    {\r\n      name: '',\r\n      icon: ''\r\n    },\r\n    {\r\n      name: '',\r\n      icon: ''\r\n    },\r\n    {\r\n      name: '',\r\n      icon: ''\r\n    }\r\n  ];\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n","import { DataStore } from '../shell/data-store';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nexport interface IResolvedRouteData<T> {\r\n  data: T | DataStore<T>;\r\n}\r\n\r\nexport class ResolverHelper<T> {\r\n  // More info on function overloads here: https://www.typescriptlang.org/docs/handbook/functions.html#overloads\r\n  public static extractData<T>(source: (T | DataStore<T>), constructor: (new(...args: any[]) => T)): Observable<T> {\r\n    if (source instanceof DataStore) {\r\n      return source.state;\r\n    } else if (source instanceof constructor) {\r\n      // The right side of instanceof should be an expression evaluating to a constructor function (ie. a class), not a type\r\n      // That's why we included an extra parameter which acts as a constructor function for type T\r\n      // (see: https://github.com/microsoft/TypeScript/issues/5236)\r\n      return of(source);\r\n    }\r\n  }\r\n}\r\n","import { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\r\nimport { delay, map, startWith } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport class ShellModel {\r\n  isShell = false;\r\n}\r\n\r\nexport class DataStore<T> {\r\n  // We wait on purpose 2 secs on local environment when fetching from json to simulate the backend roundtrip.\r\n  // However, in production you should set this delay to 0 in the environment.prod file.\r\n  // tslint:disable-next-line:max-line-length\r\n  private networkDelay = (environment.appShellConfig && environment.appShellConfig.networkDelay) ? environment.appShellConfig.networkDelay : 0;\r\n\r\n  private timeline: ReplaySubject<T & ShellModel> = new ReplaySubject(1);\r\n\r\n  constructor(private shellModel: T) { }\r\n\r\n  // Static function with generics\r\n  // (ref: https://stackoverflow.com/a/24293088/1116959)\r\n  // Append a shell (T & ShellModel) to every value (T) emmited to the timeline\r\n  public static AppendShell<T>(dataObservable: Observable<T>, shellModel: T, networkDelay = 400): Observable<T & ShellModel> {\r\n    const delayObservable = of(true).pipe(\r\n      delay(networkDelay)\r\n    );\r\n\r\n    // Assign shell flag accordingly\r\n    // (ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\r\n    return combineLatest([\r\n      delayObservable,\r\n      dataObservable\r\n    ]).pipe(\r\n      // Dismiss unnecessary delayValue\r\n      map(([delayValue, dataValue]: [boolean, T]): (T & ShellModel) => Object.assign(dataValue, {isShell: false})),\r\n      // Set the shell model as the initial value\r\n      startWith(Object.assign(shellModel, {isShell: true}))\r\n    );\r\n  }\r\n\r\n  load(dataSourceObservable: Observable<T>, networkDelay?: number): void {\r\n    // tslint:disable-next-line:no-shadowed-variable\r\n    const delay = (typeof networkDelay === 'number') ? networkDelay : this.networkDelay;\r\n\r\n    let processedDataSource: Observable<any>;\r\n\r\n    // If no network delay, then don't show shell\r\n    if (delay === 0) {\r\n      processedDataSource = dataSourceObservable;\r\n    } else {\r\n      processedDataSource = DataStore.AppendShell(dataSourceObservable, this.shellModel, delay);\r\n    }\r\n\r\n    processedDataSource\r\n    .subscribe((dataValue: T & ShellModel) => {\r\n      this.timeline.next(dataValue);\r\n    });\r\n  }\r\n\r\n  public get state(): Observable<T & ShellModel> {\r\n    return this.timeline.asObservable();\r\n  }\r\n}\r\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { DataStore } from '../shell/data-store';\r\nimport { RealEstateListingModel } from './listing/real-estate-listing.model';\r\nimport { RealEstateDetailsModel } from './details/real-estate-details.model';\r\nimport { TransferStateHelper } from '../utils/transfer-state-helper';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class RealEstateService {\r\n  private listingDataStore: DataStore<RealEstateListingModel>;\r\n  private detailsDataStore: DataStore<RealEstateDetailsModel>;\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: object,\r\n    private transferStateHelper: TransferStateHelper,\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  public getListingDataSource(): Observable<RealEstateListingModel> {\r\n    const rawDataSource = this.http.get<RealEstateListingModel>('./assets/sample-data/real-estate/listing.json')\r\n    .pipe(\r\n      map(\r\n        (data: RealEstateListingModel) => {\r\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\r\n          // We need to properly cast types from json data\r\n          const listing = new RealEstateListingModel();\r\n\r\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\r\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\r\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\r\n          Object.assign(listing, data);\r\n\r\n          return listing;\r\n        }\r\n      )\r\n    );\r\n\r\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\r\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\r\n    // duplicate http requests.\r\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('real-estate-listing-state', rawDataSource);\r\n\r\n    return cachedDataSource;\r\n  }\r\n\r\n  public getListingStore(dataSource: Observable<RealEstateListingModel>): DataStore<RealEstateListingModel> {\r\n    // Use cache if available\r\n    if (!this.listingDataStore) {\r\n      // Initialize the model specifying that it is a shell model\r\n      const shellModel: RealEstateListingModel = new RealEstateListingModel();\r\n      this.listingDataStore = new DataStore(shellModel);\r\n\r\n      // If running in the server, then don't add shell to the Data Store\r\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\r\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\r\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\r\n        this.listingDataStore.load(dataSource, 0);\r\n      } else { // On browser transitions\r\n        // Trigger the loading mechanism (with shell)\r\n        this.listingDataStore.load(dataSource);\r\n      }\r\n    }\r\n    return this.listingDataStore;\r\n  }\r\n\r\n  public getDetailsDataSource(): Observable<RealEstateDetailsModel> {\r\n    const rawDataSource = this.http.get<RealEstateDetailsModel>('./assets/sample-data/real-estate/details.json')\r\n    .pipe(\r\n      map(\r\n        (data: RealEstateDetailsModel) => {\r\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\r\n          // We need to properly cast types from json data\r\n          const details = new RealEstateDetailsModel();\r\n\r\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\r\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\r\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\r\n          Object.assign(details, data);\r\n\r\n          return details;\r\n        }\r\n      )\r\n    );\r\n\r\n    // This method tapps into the raw data source and stores the resolved data in the TransferState, then when\r\n    // transitioning from the server rendered view to the browser, checks if we already loaded the data in the server to prevent\r\n    // duplicate http requests.\r\n    const cachedDataSource = this.transferStateHelper.checkDataSourceState('real-estate-details-state', rawDataSource);\r\n\r\n    return cachedDataSource;\r\n  }\r\n\r\n  public getDetailsStore(dataSource: Observable<RealEstateDetailsModel>): DataStore<RealEstateDetailsModel> {\r\n    // Use cache if available\r\n    if (!this.detailsDataStore) {\r\n      // Initialize the model specifying that it is a shell model\r\n      const shellModel: RealEstateDetailsModel = new RealEstateDetailsModel();\r\n      this.detailsDataStore = new DataStore(shellModel);\r\n\r\n      // If running in the server, then don't add shell to the Data Store\r\n      // If we already loaded the Data Source in the server, then don't show a shell when transitioning back to the broswer from the server\r\n      if (isPlatformServer(this.platformId) || dataSource['ssr_state']) {\r\n        // Trigger loading mechanism with 0 delay (this will prevent the shell to be shown)\r\n        this.detailsDataStore.load(dataSource, 0);\r\n      } else { // On browser transitions\r\n        // Trigger the loading mechanism (with shell)\r\n        this.detailsDataStore.load(dataSource);\r\n      }\r\n    }\r\n\r\n    return this.detailsDataStore;\r\n  }\r\n}\r\n"]}