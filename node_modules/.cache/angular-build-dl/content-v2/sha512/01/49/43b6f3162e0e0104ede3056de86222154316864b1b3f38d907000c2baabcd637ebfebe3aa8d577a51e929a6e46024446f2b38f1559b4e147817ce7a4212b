{"version":3,"sources":["webpack:///src/app/firebase/auth/sign-up/firebase-sign-up.page.html","webpack:///src/app/firebase/auth/sign-up/firebase-sign-up.page.ts","webpack:///src/app/firebase/auth/sign-up/firebase-sign-up.module.ts"],"names":["FirebaseSignUpPage","router","route","menu","authService","ngZone","loadingController","location","validation_messages","type","message","matching_passwords_group","compose","minLength","required","formGroup","areNotEqual","signupForm","pattern","authRedirectResult","getRedirectResult","subscribe","result","user","redirectLoggedUserToProfilePage","error","manageAuthWithProvidersErrors","queryParams","params","authProvider","presentLoading","enable","dismissLoading","run","previousUrl","navigate","replaceUrl","authProviderCapitalized","toUpperCase","slice","create","redirectLoader","present","dismiss","submitError","go","path","getState","errorMessage","replaceState","url","split","resetSubmitError","values","value","signUpWithEmail","email","matching_passwords","password","then","prepareForAuthWithProvidersRedirection","signInWithFacebook","signInWithGoogle","console","log","signInWithTwitter","doFacebookSignup","doGoogleSignup","doTwitterSignup","selector","templateUrl","styleUrls","routes","component","FirebaseSignUpPageModule","forChild","imports","declarations"],"mappings":"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","file":"sign-up-firebase-sign-up-module-es5.js","sourcesContent":["<ion-header class=\"ion-no-border\">\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button></ion-back-button>\r\n    </ion-buttons>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"signup-content\">\r\n  <h2 class=\"auth-title\">\r\n    Sign Up with Firebase\r\n  </h2>\r\n  <form [formGroup]=\"signupForm\" (ngSubmit)=\"signUpWithEmail()\">\r\n    <ion-list class=\"inputs-list\" lines=\"full\">\r\n      <ion-item class=\"input-item\">\r\n        <ion-input type=\"email\" placeholder=\"Email\" formControlName=\"email\" clearInput autocapitalize=\"off\" inputmode=\"email\"></ion-input>\r\n      </ion-item>\r\n      <div class=\"error-container\">\r\n        <ng-container *ngFor=\"let validation of validation_messages.email\">\r\n          <div class=\"error-message\" *ngIf=\"signupForm.get('email').hasError(validation.type) && (signupForm.get('email').dirty || signupForm.get('email').touched)\">\r\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n            <span>{{ validation.message }}</span>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n\r\n      <div formGroupName=\"matching_passwords\">\r\n        <ion-item class=\"input-item\">\r\n          <app-show-hide-password>\r\n            <ion-input type=\"password\" placeholder=\"Password\" formControlName=\"password\"></ion-input>\r\n          </app-show-hide-password>\r\n        </ion-item>\r\n        <div class=\"error-container\">\r\n          <ng-container *ngFor=\"let validation of validation_messages.password\">\r\n            <div class=\"error-message\" *ngIf=\"signupForm.get('matching_passwords').get('password').hasError(validation.type) && (signupForm.get('matching_passwords').get('password').dirty || signupForm.get('matching_passwords').get('password').touched)\">\r\n              <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n              <span>{{ validation.message }}</span>\r\n            </div>\r\n          </ng-container>\r\n        </div>\r\n\r\n        <ion-item class=\"input-item\">\r\n          <app-show-hide-password>\r\n            <ion-input type=\"password\" placeholder=\"Confirm Password\" formControlName=\"confirm_password\"></ion-input>\r\n          </app-show-hide-password>\r\n        </ion-item>\r\n        <div class=\"error-container\">\r\n          <ng-container *ngFor=\"let validation of validation_messages.confirm_password\">\r\n            <div class=\"error-message\" *ngIf=\"signupForm.get('matching_passwords').get('confirm_password').hasError(validation.type) && (signupForm.get('matching_passwords').get('confirm_password').dirty || signupForm.get('matching_passwords').get('confirm_password').touched)\">\r\n              <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n              <span>{{ validation.message }}</span>\r\n            </div>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n      <div class=\"error-container\">\r\n        <ng-container *ngFor=\"let validation of validation_messages.matching_passwords\">\r\n          <div class=\"error-message\" *ngIf=\"signupForm.get('matching_passwords').hasError(validation.type) && (signupForm.get('matching_passwords').get('confirm_password').dirty || signupForm.get('matching_passwords').get('confirm_password').touched)\">\r\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n            <span>{{ validation.message }}</span>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </ion-list>\r\n\r\n    <ion-button class=\"signup-btn\" type=\"submit\" expand=\"block\" [disabled]=\"!signupForm.valid\">Sign Up</ion-button>\r\n    <div class=\"error-container\" *ngIf=\"submitError\">\r\n      <div class=\"error-message\">\r\n        <ion-icon name=\"information-circle-outline\"></ion-icon>\r\n        <span>{{ submitError }}</span>\r\n      </div>\r\n    </div>\r\n    <ion-row class=\"other-auth-options-row\">\r\n      <ion-button class=\"login-btn\" fill=\"clear\" [routerLink]=\"['/firebase/auth/sign-in']\">\r\n        Already have an account?\r\n      </ion-button>\r\n    </ion-row>\r\n  </form>\r\n\r\n  <div class=\"social-auth-options\">\r\n    <p class=\"options-divider\">Or</p>\r\n    <ion-button class=\"social-auth-btn facebook-auth-btn\" expand=\"block\" color=\"facebook\" (click)=\"doFacebookSignup()\">Sign Up with Facebook</ion-button>\r\n    <ion-button class=\"social-auth-btn google-auth-btn\" expand=\"block\" color=\"google\" (click)=\"doGoogleSignup()\">Sign Up with Google</ion-button>\r\n    <ion-button class=\"social-auth-btn twitter-auth-btn\" expand=\"block\" color=\"twitter\" (click)=\"doTwitterSignup()\">Sign Up with Twitter</ion-button>\r\n  </div>\r\n</ion-content>\r\n","import { Component, OnInit, NgZone } from '@angular/core';\r\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\r\nimport { Location } from '@angular/common';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { MenuController, LoadingController } from '@ionic/angular';\r\nimport { PasswordValidator } from '../../../validators/password.validator';\r\nimport { FirebaseAuthService } from '../firebase-auth.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-firebase-sign-up',\r\n  templateUrl: './firebase-sign-up.page.html',\r\n  styleUrls: [\r\n    './styles/firebase-sign-up.page.scss'\r\n  ]\r\n})\r\nexport class FirebaseSignUpPage implements OnInit {\r\n  signupForm: FormGroup;\r\n  matching_passwords_group: FormGroup;\r\n  submitError: string;\r\n  redirectLoader: HTMLIonLoadingElement;\r\n  authRedirectResult: Subscription;\r\n\r\n  validation_messages = {\r\n    'email': [\r\n      { type: 'required', message: 'Email is required.' },\r\n      { type: 'pattern', message: 'Enter a valid email.' }\r\n    ],\r\n    'password': [\r\n      { type: 'required', message: 'Password is required.' },\r\n      { type: 'minlength', message: 'Password must be at least 6 characters long.' }\r\n    ],\r\n    'confirm_password': [\r\n      { type: 'required', message: 'Confirm password is required' }\r\n    ],\r\n    'matching_passwords': [\r\n      { type: 'areNotEqual', message: 'Password mismatch' }\r\n    ]\r\n  };\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute,\r\n    public menu: MenuController,\r\n    public authService: FirebaseAuthService,\r\n    private ngZone: NgZone,\r\n    public loadingController: LoadingController,\r\n    public location: Location\r\n  ) {\r\n    this.matching_passwords_group = new FormGroup({\r\n      'password': new FormControl('', Validators.compose([\r\n        Validators.minLength(6),\r\n        Validators.required\r\n      ])),\r\n      'confirm_password': new FormControl('', Validators.required)\r\n    }, (formGroup: FormGroup) => {\r\n      return PasswordValidator.areNotEqual(formGroup);\r\n    });\r\n\r\n    this.signupForm = new FormGroup({\r\n      'email': new FormControl('', Validators.compose([\r\n        Validators.required,\r\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\r\n      ])),\r\n      'matching_passwords': this.matching_passwords_group\r\n    });\r\n\r\n    // Get firebase authentication redirect result invoken when using signInWithRedirect()\r\n    // signInWithRedirect() is only used when client is in web but not desktop\r\n    this.authRedirectResult = this.authService.getRedirectResult()\r\n    .subscribe(result => {\r\n      if (result.user) {\r\n        this.redirectLoggedUserToProfilePage();\r\n      } else if (result.error) {\r\n        this.manageAuthWithProvidersErrors(result.error);\r\n      }\r\n    });\r\n\r\n    // Check if url contains our custom 'auth-redirect' param, then show a loader while we receive the getRedirectResult notification\r\n    this.route.queryParams.subscribe(params => {\r\n      const authProvider = params['auth-redirect'];\r\n      if (authProvider) {\r\n        this.presentLoading(authProvider);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.menu.enable(false);\r\n  }\r\n\r\n  // Once the auth provider finished the authentication flow, and the auth redirect completes,\r\n  // hide the loader and redirect the user to the profile page\r\n  redirectLoggedUserToProfilePage() {\r\n    this.dismissLoading();\r\n\r\n    // As we are calling the Angular router navigation inside a subscribe method, the navigation will be triggered outside Angular zone.\r\n    // That's why we need to wrap the router navigation call inside an ngZone wrapper\r\n    this.ngZone.run(() => {\r\n      // Get previous URL from our custom History Helper\r\n      // If there's no previous page, then redirect to profile\r\n      // const previousUrl = this.historyHelper.previousUrl || 'firebase/auth/profile';\r\n      const previousUrl = 'firebase/auth/profile';\r\n\r\n      // No need to store in the navigation history the sign-in page with redirect params (it's justa a mandatory mid-step)\r\n      // Navigate to profile and replace current url with profile\r\n      this.router.navigate([previousUrl], { replaceUrl: true });\r\n    });\r\n  }\r\n\r\n  async presentLoading(authProvider?: string) {\r\n    const authProviderCapitalized = authProvider[0].toUpperCase() + authProvider.slice(1);\r\n    this.redirectLoader = await this.loadingController.create({\r\n      message: authProvider ? 'Signing up with ' + authProviderCapitalized : 'Signin up ...'\r\n    });\r\n    await this.redirectLoader.present();\r\n  }\r\n\r\n  async dismissLoading() {\r\n    if (this.redirectLoader) {\r\n      await this.redirectLoader.dismiss();\r\n    }\r\n  }\r\n\r\n  resetSubmitError() {\r\n    this.submitError = null;\r\n  }\r\n\r\n  // Before invoking auth provider redirect flow, present a loading indicator and add a flag to the path.\r\n  // The precense of the flag in the path indicates we should wait for the auth redirect to complete.\r\n  prepareForAuthWithProvidersRedirection(authProvider: string) {\r\n    this.presentLoading(authProvider);\r\n\r\n    this.location.go(this.location.path(), 'auth-redirect=' + authProvider, this.location.getState());\r\n  }\r\n\r\n  manageAuthWithProvidersErrors(errorMessage: string) {\r\n    this.submitError = errorMessage;\r\n    // remove auth-redirect param from url\r\n    this.location.replaceState(this.router.url.split('?')[0], '');\r\n    this.dismissLoading();\r\n  }\r\n\r\n  signUpWithEmail(): void {\r\n    this.resetSubmitError();\r\n    const values = this.signupForm.value;\r\n    this.authService.signUpWithEmail(values.email, values.matching_passwords.password)\r\n      .then(user => {\r\n        // navigate to user profile\r\n        this.redirectLoggedUserToProfilePage();\r\n      })\r\n      .catch(error => {\r\n        this.submitError = error.message;\r\n      });\r\n  }\r\n\r\n  doFacebookSignup(): void {\r\n    this.resetSubmitError();\r\n    this.prepareForAuthWithProvidersRedirection('facebook');\r\n\r\n    this.authService.signInWithFacebook()\r\n    .subscribe((result) => {\r\n      // This gives you a Facebook Access Token. You can use it to access the Facebook API.\r\n      // const token = result.credential.accessToken;\r\n      this.redirectLoggedUserToProfilePage();\r\n    }, (error) => {\r\n      this.manageAuthWithProvidersErrors(error.message);\r\n    });\r\n  }\r\n\r\n  doGoogleSignup(): void {\r\n    this.resetSubmitError();\r\n    this.prepareForAuthWithProvidersRedirection('google');\r\n\r\n    this.authService.signInWithGoogle()\r\n    .subscribe((result) => {\r\n      // This gives you a Google Access Token. You can use it to access the Google API.\r\n      // var token = result.credential.accessToken;\r\n      this.redirectLoggedUserToProfilePage();\r\n    }, (error) => {\r\n        console.log(error);\r\n      this.manageAuthWithProvidersErrors(error.message);\r\n    });\r\n  }\r\n\r\n  doTwitterSignup(): void {\r\n    this.resetSubmitError();\r\n    this.prepareForAuthWithProvidersRedirection('twitter');\r\n\r\n    this.authService.signInWithTwitter()\r\n    .subscribe((result) => {\r\n      // This gives you a Twitter Access Token. You can use it to access the Twitter API.\r\n      // var token = result.credential.accessToken;\r\n      this.redirectLoggedUserToProfilePage();\r\n    }, (error) => {\r\n      console.log(error);\r\n      this.manageAuthWithProvidersErrors(error.message);\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { FirebaseSignUpPage } from './firebase-sign-up.page';\r\nimport { ComponentsModule } from '../../../components/components.module';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: FirebaseSignUpPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes),\r\n    ComponentsModule\r\n  ],\r\n  declarations: [FirebaseSignUpPage]\r\n})\r\nexport class FirebaseSignUpPageModule {}\r\n"]}